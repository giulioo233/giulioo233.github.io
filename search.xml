<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2023年终总结</title>
      <link href="/2024/01/15/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>/2024/01/15/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a><strong>序</strong></h2><p>BULLSHIIIIIT</p><p>等我心情好了再写吧。。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socket网络编程</title>
      <link href="/2023/05/10/Socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/05/10/Socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>环境：Linux</p><p>协议：UDP</p></blockquote><h1 id="网络知识"><a href="#网络知识" class="headerlink" title="网络知识"></a><strong>网络知识</strong></h1><h2 id="UDP简介"><a href="#UDP简介" class="headerlink" title="UDP简介"></a><strong>UDP简介</strong></h2><p>UDP全称 User Datagram Protocol，即：用户数据报协议。是面向无连接的协议。通常，UDP 通信还会被冠以<strong>不可靠</strong>的头衔。这里的不可靠指的是：无法可靠地得知对方是否收到数据。<code>&lt;br /&gt;</code>UDP有如下特征：</p><ul><li>无连接：通信双方不需要事先连接</li><li>无确认：收到数据不给对方发回执确认</li><li>不保证有序、丢失不重发</li><li>采用帧同步的数据报通信方式（即通信双方每次的收发数据量相等）<br>简单来讲，UDP 类似于寄信，如果两个人除了信件之外没有任何别的通信方式，那么信件寄出去了之后，寄件人是无法得知收件人是否收到信件或者是否已经读取内容的。UDP 的特点是无需连接、无需确认、无需缓冲区和分包序列号，因此 UDP 的效率是比较高的。</li></ul><h2 id="UDP通信流程"><a href="#UDP通信流程" class="headerlink" title="UDP通信流程"></a><strong>UDP通信流程</strong></h2><ul><li><p>发送方：</p><ol><li>创建 UDP 套接字： int fd = socket();</li><li>准备好接收方的地址：struct sockaddr_in peerAddr;</li><li>给对方发送 UDP 数据报：sendto(fd, peerAddr);</li></ol></li><li><p>接收方：</p><ol><li>创建 UDP 套接字：int fd = socket();</li><li>准备好自己的地址：struct sockaddr_in addr;</li><li>绑定套接字和地址：bind(fd, addr);</li><li>坐等各方发来的 UDP 数据报：recvfrom(fd);</li></ol></li></ul><h3 id="如何理解套接字"><a href="#如何理解套接字" class="headerlink" title="如何理解套接字"></a>如何理解套接字</h3><p><img src="/img/Socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-1.png" alt="image.png"></p><h1 id="编程实例"><a href="#编程实例" class="headerlink" title="编程实例"></a>编程实例</h1><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/ip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 5000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_IP <span class="string">&quot;192.168.6.5&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IVVER_LEN 17</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROVER_LEN 85</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">float</span> Ia;</span><br><span class="line"><span class="type">float</span> Ib;</span><br><span class="line"><span class="type">float</span> Ic;</span><br><span class="line"><span class="type">uint16_t</span> Va;</span><br><span class="line"><span class="type">uint16_t</span> Vb;</span><br><span class="line"><span class="type">uint16_t</span> Vc;</span><br><span class="line">&#125; analysis_s_part;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">float</span> Ia;</span><br><span class="line"><span class="type">float</span> Ib;</span><br><span class="line"><span class="type">float</span> Ic;</span><br><span class="line"><span class="type">uint16_t</span> Va;</span><br><span class="line"><span class="type">uint16_t</span> Vb;</span><br><span class="line"><span class="type">uint16_t</span> Vc;</span><br><span class="line"><span class="type">float</span> Ca;</span><br><span class="line"><span class="type">float</span> Cb;</span><br><span class="line"><span class="type">float</span> Cc;</span><br><span class="line">&#125; analysis_l_part;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sense_part</span>&#123;</span></span><br><span class="line"><span class="type">uint16_t</span> type;<span class="comment">//类型</span></span><br><span class="line"><span class="type">uint16_t</span> number;<span class="comment">//编号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">content_part</span> &#123;</span></span><br><span class="line"><span class="type">uint32_t</span> ticks;<span class="comment">//时间戳</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sense_part</span> <span class="title">sense</span>;</span><span class="comment">//感知部分</span></span><br><span class="line"><span class="type">float</span> value;<span class="comment">//量值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">udp_request</span> &#123;</span></span><br><span class="line"><span class="type">uint8_t</span> forward;<span class="comment">//前导</span></span><br><span class="line"><span class="type">uint8_t</span> reserve;<span class="comment">//保留位，填充信息</span></span><br><span class="line"><span class="type">uint16_t</span> version;<span class="comment">//版本</span></span><br><span class="line"><span class="type">uint16_t</span> length;<span class="comment">//长度</span></span><br><span class="line"><span class="type">uint16_t</span> verify;<span class="comment">//校验</span></span><br><span class="line"><span class="type">uint16_t</span> command;<span class="comment">//指令</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">content_part</span> <span class="title">content</span>;</span><span class="comment">//内容部分</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment">* Name:    CRC-16/MODBUS       x16+x15+x2+1</span></span><br><span class="line"><span class="comment">* Poly:    0x8005</span></span><br><span class="line"><span class="comment">* Init:    0xFFFF</span></span><br><span class="line"><span class="comment">* Refin:   True</span></span><br><span class="line"><span class="comment">* Refout:  True</span></span><br><span class="line"><span class="comment">* Xorout:  0x0000</span></span><br><span class="line"><span class="comment">* Note:</span></span><br><span class="line"><span class="comment">*****************************************************************************/</span></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">crc16_modbus</span><span class="params">(<span class="type">uint8_t</span> *data, <span class="type">uint16_t</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> i;</span><br><span class="line"><span class="type">uint16_t</span> crc = <span class="number">0xffff</span>;        <span class="comment">// Initial value</span></span><br><span class="line"><span class="keyword">while</span>(length--)</span><br><span class="line">&#123;</span><br><span class="line">crc ^= *data++;            <span class="comment">// crc ^= *data; data++;</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (crc &amp; <span class="number">1</span>)</span><br><span class="line">crc = (crc &gt;&gt; <span class="number">1</span>) ^ <span class="number">0xA001</span>;        <span class="comment">// 0xA001 = reverse 0x8005</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">crc = (crc &gt;&gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> crc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//报文解析</span></span><br><span class="line"><span class="comment">//DianliuDianyaBan</span></span><br><span class="line">analysis_s_part <span class="title function_">analysis_s</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *rec_data)</span>&#123;</span><br><span class="line">analysis_s_part ana_s;</span><br><span class="line"><span class="type">uint8_t</span> DataLength_Short = rec_data[<span class="number">2</span>];</span><br><span class="line"><span class="type">float</span> ElectricityA1 =(rec_data[<span class="number">3</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">4</span>]);</span><br><span class="line"><span class="type">float</span> ElectricityA = ElectricityA1/<span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> ElectricityB1 =(rec_data[<span class="number">5</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">6</span>]);</span><br><span class="line"><span class="type">float</span> ElectricityB = ElectricityB1/<span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> ElectricityC1 =(rec_data[<span class="number">7</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">8</span>]);</span><br><span class="line"><span class="type">float</span> ElectricityC = ElectricityC1/<span class="number">10</span>;</span><br><span class="line"><span class="type">uint16_t</span> VoltageA = rec_data[<span class="number">9</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">10</span>];</span><br><span class="line"><span class="type">uint16_t</span> VoltageB = rec_data[<span class="number">11</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">12</span>];</span><br><span class="line"><span class="type">uint16_t</span> VoltageC = rec_data[<span class="number">13</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">14</span>];</span><br><span class="line">ana_s.Ia = ElectricityA;</span><br><span class="line">ana_s.Ib = ElectricityB;</span><br><span class="line">ana_s.Ic = ElectricityC;</span><br><span class="line">ana_s.Va = VoltageA;</span><br><span class="line">ana_s.Vb = VoltageB;</span><br><span class="line">ana_s.Vc = VoltageC;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;DianliuDianyaBan:\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Length: %d\n&quot;</span>, DataLength_Short);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ElectricityA: %.1f\n&quot;</span>, ElectricityA);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ElectricityB: %.1f\n&quot;</span>, ElectricityB);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ElectricityC: %.1f\n&quot;</span>, ElectricityC);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;VoltageA: %d\n&quot;</span>, VoltageA);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;VoltageB: %d\n&quot;</span>, VoltageB);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;VoltageC: %d\n&quot;</span>, VoltageC);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ana_s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//QuannengBan</span></span><br><span class="line">analysis_l_part <span class="title function_">analysis_l</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *rec_data)</span>&#123;</span><br><span class="line">analysis_l_part ana_l;</span><br><span class="line"><span class="type">uint8_t</span> DataLength_Long = rec_data[<span class="number">2</span>];</span><br><span class="line"><span class="type">float</span> ProElectricityA1 =(rec_data[<span class="number">3</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">4</span>]);</span><br><span class="line"><span class="type">float</span> ProElectricityA = ProElectricityA1/<span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> ProElectricityB1 =(rec_data[<span class="number">5</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">6</span>]);</span><br><span class="line"><span class="type">float</span> ProElectricityB = ProElectricityB1/<span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> ProElectricityC1 =(rec_data[<span class="number">7</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">8</span>]);</span><br><span class="line"><span class="type">float</span> ProElectricityC = ProElectricityC1/<span class="number">10</span>;</span><br><span class="line"><span class="type">uint16_t</span> ProVoltageA = rec_data[<span class="number">9</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">10</span>];</span><br><span class="line"><span class="type">uint16_t</span> ProVoltageB = rec_data[<span class="number">11</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">12</span>];</span><br><span class="line"><span class="type">uint16_t</span> ProVoltageC = rec_data[<span class="number">13</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">14</span>];</span><br><span class="line"><span class="type">uint16_t</span> ActivePowerA_h = rec_data[<span class="number">15</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">16</span>];</span><br><span class="line"><span class="type">int</span> ActivePowerA;</span><br><span class="line"><span class="keyword">if</span>(ActivePowerA_h &gt;&gt; <span class="number">12</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">ActivePowerA_h = ~ActivePowerA_h + <span class="number">1</span>;</span><br><span class="line">ActivePowerA = -ActivePowerA_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ActivePowerA = ActivePowerA_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint16_t</span> ActivePowerB_h = rec_data[<span class="number">17</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">18</span>];</span><br><span class="line"><span class="type">int</span> ActivePowerB;</span><br><span class="line"><span class="keyword">if</span>(ActivePowerB_h &gt;&gt; <span class="number">12</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">ActivePowerB_h = ~ActivePowerB_h + <span class="number">1</span>;</span><br><span class="line">ActivePowerB = -ActivePowerB_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ActivePowerB = ActivePowerB_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint16_t</span> ActivePowerC_h = rec_data[<span class="number">19</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> ActivePowerC;</span><br><span class="line"><span class="keyword">if</span>(ActivePowerC_h &gt;&gt; <span class="number">12</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">ActivePowerC_h = ~ActivePowerC_h + <span class="number">1</span>;</span><br><span class="line">ActivePowerC = -ActivePowerC_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ActivePowerC = ActivePowerC_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint32_t</span> TotalActivePower_h = rec_data[<span class="number">21</span>] &lt;&lt;<span class="number">24</span> | rec_data[<span class="number">22</span>] &lt;&lt;<span class="number">16</span> | rec_data[<span class="number">23</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">24</span>];</span><br><span class="line"><span class="type">int</span> TotalActivePower;</span><br><span class="line"><span class="keyword">if</span>(TotalActivePower_h &gt;&gt; <span class="number">28</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">TotalActivePower_h = ~TotalActivePower_h + <span class="number">1</span>;</span><br><span class="line">TotalActivePower = -TotalActivePower_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">TotalActivePower = TotalActivePower_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint16_t</span> ReactivePowerA_h = rec_data[<span class="number">25</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">26</span>];</span><br><span class="line"><span class="type">int</span> ReactivePowerA;</span><br><span class="line"><span class="keyword">if</span>(ReactivePowerA_h &gt;&gt; <span class="number">12</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">ReactivePowerA_h = ~ReactivePowerA_h + <span class="number">1</span>;</span><br><span class="line">ReactivePowerA = -ReactivePowerA_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ReactivePowerA = ReactivePowerA_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint16_t</span> ReactivePowerB_h = rec_data[<span class="number">27</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">28</span>];</span><br><span class="line"><span class="type">int</span> ReactivePowerB;</span><br><span class="line"><span class="keyword">if</span>(ReactivePowerB_h &gt;&gt; <span class="number">12</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">ReactivePowerB_h = ~ReactivePowerB_h + <span class="number">1</span>;</span><br><span class="line">ReactivePowerB = -ReactivePowerB_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ReactivePowerB = ReactivePowerB_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint16_t</span> ReactivePowerC_h = rec_data[<span class="number">29</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">30</span>];</span><br><span class="line"><span class="type">int</span> ReactivePowerC;</span><br><span class="line"><span class="keyword">if</span>(ReactivePowerC_h &gt;&gt; <span class="number">12</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">ReactivePowerC_h = ~ReactivePowerC_h + <span class="number">1</span>;</span><br><span class="line">ReactivePowerC = -ReactivePowerC_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ReactivePowerC = ReactivePowerC_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint32_t</span> TotalReactivePower_h = rec_data[<span class="number">31</span>] &lt;&lt; <span class="number">24</span> | rec_data[<span class="number">32</span>] &lt;&lt;<span class="number">16</span> | rec_data[<span class="number">33</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">34</span>];</span><br><span class="line"><span class="type">int</span> TotalReactivePower;</span><br><span class="line"><span class="keyword">if</span>(TotalReactivePower_h &gt;&gt; <span class="number">28</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">TotalReactivePower_h = ~TotalReactivePower_h + <span class="number">1</span>;</span><br><span class="line">TotalReactivePower = -TotalReactivePower_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">TotalReactivePower = TotalReactivePower_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint16_t</span> ApparentPowerA_h = rec_data[<span class="number">35</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">36</span>];</span><br><span class="line"><span class="type">int</span> ApparentPowerA;</span><br><span class="line"><span class="keyword">if</span>(ApparentPowerA_h &gt;&gt; <span class="number">12</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">ApparentPowerA_h = ~ApparentPowerA_h + <span class="number">1</span>;</span><br><span class="line">ApparentPowerA = -ApparentPowerA_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ApparentPowerA = ApparentPowerA_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint16_t</span> ApparentPowerB_h = rec_data[<span class="number">37</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">38</span>];</span><br><span class="line"><span class="type">int</span> ApparentPowerB;</span><br><span class="line"><span class="keyword">if</span>(ApparentPowerB_h &gt;&gt; <span class="number">12</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">ApparentPowerB_h = ~ApparentPowerB_h + <span class="number">1</span>;</span><br><span class="line">ApparentPowerB = -ApparentPowerB_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ApparentPowerB = ApparentPowerB_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint16_t</span> ApparentPowerC_h = rec_data[<span class="number">39</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">40</span>];</span><br><span class="line"><span class="type">int</span> ApparentPowerC;</span><br><span class="line"><span class="keyword">if</span>(ApparentPowerC_h &gt;&gt; <span class="number">12</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">ApparentPowerC_h = ~ApparentPowerC_h + <span class="number">1</span>;</span><br><span class="line">ApparentPowerC = -ApparentPowerC_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ApparentPowerC = ApparentPowerC_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint32_t</span> TotalApparentPower_h = rec_data[<span class="number">41</span>] &lt;&lt; <span class="number">24</span> | rec_data[<span class="number">42</span>] &lt;&lt; <span class="number">16</span>| rec_data[<span class="number">43</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">44</span>];</span><br><span class="line"><span class="type">int</span> TotalApparentPower;</span><br><span class="line"><span class="keyword">if</span>(TotalApparentPower_h &gt;&gt; <span class="number">28</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">TotalApparentPower_h = ~TotalApparentPower_h + <span class="number">1</span>;</span><br><span class="line">TotalApparentPower = -TotalApparentPower_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">TotalApparentPower = TotalApparentPower_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">float</span> PowerFactorA1_h =(rec_data[<span class="number">45</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">46</span>]);</span><br><span class="line"><span class="type">float</span> PowerFactorA = PowerFactorA1_h/<span class="number">100</span>;</span><br><span class="line"><span class="type">float</span> PowerFactorB1 =(rec_data[<span class="number">47</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">48</span>]);</span><br><span class="line"><span class="type">float</span> PowerFactorB = PowerFactorB1/<span class="number">100</span>;</span><br><span class="line"><span class="type">float</span> PowerFactorC1 =(rec_data[<span class="number">49</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">50</span>]);</span><br><span class="line"><span class="type">float</span> PowerFactorC = PowerFactorC1/<span class="number">100</span>;</span><br><span class="line"><span class="type">float</span> TotalPowerFactor;</span><br><span class="line"><span class="type">uint8_t</span> TotalPowerFactor_h = rec_data[<span class="number">52</span>];</span><br><span class="line"><span class="keyword">if</span>(TotalPowerFactor_h &gt;&gt; <span class="number">4</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">TotalPowerFactor_h =~TotalPowerFactor_h + <span class="number">1</span>;</span><br><span class="line">TotalPowerFactor = -(<span class="type">float</span>)TotalPowerFactor_h / <span class="number">100</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">float</span> TotalPowerFactor1 = rec_data[<span class="number">52</span>];</span><br><span class="line">TotalPowerFactor = (<span class="type">float</span>)TotalPowerFactor_h  / <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">float</span> APhaseElectricity1 = rec_data[<span class="number">54</span>] &lt;&lt; <span class="number">24</span> | rec_data[<span class="number">54</span>] &lt;&lt; <span class="number">16</span>| rec_data[<span class="number">55</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">56</span>];</span><br><span class="line"><span class="type">float</span> APhaseElectricity = APhaseElectricity1/<span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> BPhaseElectricity1 = rec_data[<span class="number">57</span>] &lt;&lt; <span class="number">24</span> | rec_data[<span class="number">58</span>] &lt;&lt; <span class="number">16</span>| rec_data[<span class="number">59</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">60</span>];</span><br><span class="line"><span class="type">float</span> BPhaseElectricity = BPhaseElectricity1/<span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> CPhaseElectricity1 = rec_data[<span class="number">61</span>] &lt;&lt; <span class="number">24</span> | rec_data[<span class="number">62</span>] &lt;&lt; <span class="number">16</span>| rec_data[<span class="number">63</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">64</span>];</span><br><span class="line"><span class="type">float</span> CPhaseElectricity = CPhaseElectricity1/<span class="number">10</span>;</span><br><span class="line"><span class="type">uint32_t</span> TotalElectricity1_h = rec_data[<span class="number">65</span>] &lt;&lt; <span class="number">16</span>;</span><br><span class="line"><span class="type">uint32_t</span> TotalElectricity2_h = TotalElectricity1_h &lt;&lt; <span class="number">8</span>;</span><br><span class="line"><span class="type">float</span> TotalElectricity1 = rec_data[<span class="number">65</span>] &lt;&lt; <span class="number">24</span> | rec_data[<span class="number">66</span>] &lt;&lt; <span class="number">16</span>| rec_data[<span class="number">67</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">68</span>];</span><br><span class="line"><span class="type">float</span> TotalElectricity = TotalElectricity1/<span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> Frequency1 =(rec_data[<span class="number">79</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">80</span>]);</span><br><span class="line"><span class="type">float</span> Frequency = Frequency1/<span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> Temperature1 =(rec_data[<span class="number">81</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">82</span>]);</span><br><span class="line"><span class="type">float</span> Temperature = Temperature1/<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">ana_l.Ia = ProElectricityA;</span><br><span class="line">ana_l.Ib = ProElectricityB;</span><br><span class="line">ana_l.Ic = ProElectricityC;</span><br><span class="line">ana_l.Va = ProVoltageA;</span><br><span class="line">ana_l.Vb = ProVoltageB;</span><br><span class="line">ana_l.Vc = ProVoltageC;</span><br><span class="line">ana_l.Ca = APhaseElectricity;</span><br><span class="line">ana_l.Cb = BPhaseElectricity;</span><br><span class="line">ana_l.Cc = CPhaseElectricity;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;QuannengBan:\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Length: %d\n&quot;</span>, DataLength_Long);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ElectricityA: %.1f\n&quot;</span>, ProElectricityA);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ElectricityB: %.1f\n&quot;</span>, ProElectricityB);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ElectricityC: %.1f\n&quot;</span>, ProElectricityC);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;VoltageA: %d\n&quot;</span>, ProVoltageA);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;VoltageB: %d\n&quot;</span>, ProVoltageB);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;VoltageC: %d\n&quot;</span>, ProVoltageC);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Active Power A: %d\n&quot;</span>, ActivePowerA);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Active Power B: %d\n&quot;</span>, ActivePowerB);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Active Power C: %d\n&quot;</span>, ActivePowerC);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Total Active Power: %d\n&quot;</span>, TotalActivePower);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Reactive Power A: %d\n&quot;</span>, ReactivePowerA);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Reactive Power B: %d\n&quot;</span>, ReactivePowerB);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Reactive Power C: %d\n&quot;</span>, ReactivePowerC);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Total Reactive Power: %d\n&quot;</span>, TotalReactivePower);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Apparent Power A: %d\n&quot;</span>, ApparentPowerA);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Apparent Power B: %d\n&quot;</span>, ApparentPowerB);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Apparent Power C: %d\n&quot;</span>, ApparentPowerC);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Total Apparent Power: %d\n&quot;</span>, TotalApparentPower);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Power Factor A: %.2f\n&quot;</span>, PowerFactorA);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Power Factor B: %.2f\n&quot;</span>, PowerFactorB);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Power Factor C: %.2f\n&quot;</span>, PowerFactorC);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Total Power Factor: %.2f\n&quot;</span>, TotalPowerFactor);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;A Quantity of electric charge: %.1f\n&quot;</span>, APhaseElectricity);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;B Quantity of electric charge: %.1f\n&quot;</span>, BPhaseElectricity);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;C Quantity of electric charge: %.1f\n&quot;</span>, CPhaseElectricity);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Total Quantity of electric charge: %.1f\n&quot;</span>, TotalElectricity);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Frequency: %.1f\n&quot;</span>, Frequency);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Temperature: %.1f\n&quot;</span>, Temperature);</span><br><span class="line"><span class="keyword">return</span> ana_l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">get_seconds</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line"><span class="type">time_t</span> current_time = time(<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">return</span> current_time;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SendAndRec</span><span class="params">(<span class="type">float</span> IV, <span class="type">uint16_t</span> type, <span class="type">uint16_t</span> number, <span class="type">unsigned</span> <span class="type">char</span>* p, <span class="keyword">struct</span> udp_request request)</span>&#123;</span><br><span class="line">request.content.value = IV;</span><br><span class="line">request.content.sense.type = htons(type);</span><br><span class="line">request.content.sense.number = htons(number);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* v = (<span class="type">char</span>*)&amp;request.command;</span><br><span class="line"><span class="type">uint16_t</span> crc_verify = crc16_modbus(v, <span class="keyword">sizeof</span>(v));</span><br><span class="line">request.verify = htons(crc_verify);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tmp;</span><br><span class="line">p = (<span class="type">char</span>*)&amp;request;</span><br><span class="line">tmp = p[<span class="number">20</span>];</span><br><span class="line">p[<span class="number">20</span>] = p[<span class="number">23</span>];</span><br><span class="line">p[<span class="number">23</span>] = tmp;</span><br><span class="line"></span><br><span class="line">tmp = p[<span class="number">21</span>];</span><br><span class="line">p[<span class="number">21</span>] = p[<span class="number">22</span>];</span><br><span class="line">p[<span class="number">22</span>] = tmp;</span><br><span class="line"><span class="type">int</span> len = <span class="keyword">sizeof</span>(request);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span> ;i&lt;len; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, *p);</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">udp_request</span> <span class="title">request</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">h</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* p = (<span class="type">char</span>*)&amp;request;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* v = (<span class="type">char</span>*)&amp;request.command;</span><br><span class="line"><span class="type">uint32_t</span> seconds = get_seconds();</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[<span class="number">1024</span>] ;</span><br><span class="line"><span class="type">char</span> buffer[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> send_data[<span class="number">1024</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">char</span> rec_data[<span class="number">1024</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">char</span> rec_data1[<span class="number">17</span>] = &#123;<span class="number">0x01</span> ,<span class="number">0x03</span> ,<span class="number">0x0C</span> ,<span class="number">0x00</span> ,<span class="number">0x4C</span> ,<span class="number">0x00</span> ,<span class="number">0x4B</span> ,<span class="number">0x00</span> ,<span class="number">0x4B</span> ,<span class="number">0x00</span> ,<span class="number">0xEA</span> ,<span class="number">0x00</span> ,<span class="number">0xEA</span> ,<span class="number">0x00</span> ,<span class="number">0xEA</span> ,<span class="number">0x93</span> ,<span class="number">0x70</span>&#125;;</span><br><span class="line"><span class="type">char</span> rec_data2[<span class="number">85</span>] = &#123;<span class="number">0x01</span> ,<span class="number">0x03</span> ,<span class="number">0x50</span> ,<span class="number">0x00</span> ,<span class="number">0x4C</span> ,<span class="number">0x00</span> ,<span class="number">0x4C</span> ,<span class="number">0x00</span> ,<span class="number">0x4B</span> ,<span class="number">0x00</span> ,<span class="number">0xEA</span> ,<span class="number">0x00</span> ,<span class="number">0xEA</span> ,<span class="number">0x00</span> ,<span class="number">0xEA</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,</span><br><span class="line">  <span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0x06</span> ,<span class="number">0xD3</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span></span><br><span class="line">  ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0x00</span> ,<span class="number">0x77</span> ,<span class="number">0x00</span> ,<span class="number">0x64</span> ,<span class="number">0x00</span> ,<span class="number">0x64</span> ,<span class="number">0x00</span> ,<span class="number">0x8F</span> ,<span class="number">0x00</span> ,<span class="number">0x00</span> ,<span class="number">0x00</span> ,<span class="number">0x02</span> ,<span class="number">0x00</span> ,<span class="number">0x00</span></span><br><span class="line">  ,<span class="number">0x00</span> ,<span class="number">0x02</span> ,<span class="number">0x00</span> ,<span class="number">0x00</span> ,<span class="number">0x00</span> ,<span class="number">0x02</span> ,<span class="number">0x00</span> ,<span class="number">0x00</span> ,<span class="number">0x00</span> ,<span class="number">0x06</span> ,<span class="number">0x00</span> ,<span class="number">0x00</span> ,<span class="number">0x00</span> ,<span class="number">0x01</span> ,<span class="number">0x00</span> ,<span class="number">0x01</span> ,<span class="number">0x00</span> ,<span class="number">0x00</span> ,<span class="number">0x00</span> ,<span class="number">0x01</span> ,<span class="number">0x01</span></span><br><span class="line">  ,<span class="number">0xF4</span> ,<span class="number">0x00</span> ,<span class="number">0xCF</span> ,<span class="number">0x68</span> ,<span class="number">0xCD</span>&#125;;</span><br><span class="line"><span class="type">char</span> *ptr1, *ptr2;</span><br><span class="line"><span class="type">int</span> i, j, len1, len2;</span><br><span class="line"><span class="type">int</span> data_len = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> addr_len = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in);</span><br><span class="line"><span class="type">char</span> hostname[] = <span class="string">&quot;www.baidu.com&quot;</span>;</span><br><span class="line"><span class="type">char</span> ip[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n\n&quot;</span>, p);</span><br><span class="line"><span class="comment">//check ziduan</span></span><br><span class="line">request.forward = <span class="number">0xaa</span>;</span><br><span class="line">request.reserve = <span class="number">0x00</span>;</span><br><span class="line">request.version = htons(<span class="number">0x0101</span>);</span><br><span class="line">request.length = htons(<span class="number">0x000c</span>);</span><br><span class="line">request.command = htons(<span class="number">0x0a01</span>);</span><br><span class="line">request.content.ticks = htonl(seconds);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> crc_verify = crc16_modbus(v, <span class="keyword">sizeof</span>(v));</span><br><span class="line">request.verify = crc_verify;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Forward: 0x%04x\n&quot;</span>, request.forward);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Version: 0x%04x\n&quot;</span>, request.version);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Length: 0x%04x\n&quot;</span>, request.length);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Verify: 0x%04x\n&quot;</span>, crc_verify);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Command: 0x%04x\n&quot;</span>, request.command);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Content-Ticks: 0x%04x\n&quot;</span>,request.content.ticks);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Content-Value:%.2f\n&quot;</span>,request.content.value);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Content-Type: 0x%04x\n&quot;</span>,request.content.sense.type);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Content-Number: 0x%04x\n&quot;</span>,request.content.sense.number);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//dns to ip</span></span><br><span class="line">h = gethostbyname(hostname);</span><br><span class="line"><span class="keyword">if</span>(h ==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;GetIP&quot;</span>);</span><br><span class="line"><span class="comment">//printf(&quot;Get IP error\n&quot;);</span></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strncpy</span>(ip, inet_ntoa(*((<span class="keyword">struct</span> in_addr *)h-&gt;h_addr)),<span class="keyword">sizeof</span>(ip));</span><br><span class="line"><span class="comment">//strncpy(ip, SERVER_IP,sizeof(ip));</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;HostName :%s\n&quot;</span>,h-&gt;h_name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;IP Address1 :%s\n&quot;</span>,inet_ntoa(*((<span class="keyword">struct</span> in_addr *)h-&gt;h_addr)));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;IP Address2 :%s\n&quot;</span>,ip);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//create udp socket </span></span><br><span class="line"><span class="type">int</span> sock = socket(AF_INET,SOCK_DGRAM,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(sock &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;socket creat&quot;</span>);</span><br><span class="line"><span class="comment">//printf(&quot;socket create error\n&quot;);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket:%d\n&quot;</span>,sock);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//set server address</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;server_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">server_addr.sin_family = AF_INET;</span><br><span class="line">server_addr.sin_addr.s_addr = inet_addr(ip);</span><br><span class="line">server_addr.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line"><span class="comment">//send data to udp server</span></span><br><span class="line"><span class="type">int</span> len = <span class="keyword">sizeof</span>(request);</span><br><span class="line">request.content.value = <span class="number">-50</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span> ;i&lt;len; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, *p);</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">p = (char*)&amp;request;</span></span><br><span class="line"><span class="comment">int sendto_len = sendto(sock, p, len, 0, (struct sockaddr *)&amp;server_addr,sizeof(server_addr));</span></span><br><span class="line"><span class="comment">if(sendto_len &lt; 0)&#123;</span></span><br><span class="line"><span class="comment">perror(&quot;sendto&quot;);</span></span><br><span class="line"><span class="comment">return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">printf(&quot;data:%d\n&quot;,sendto_len);</span></span><br><span class="line"><span class="comment">printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//send and receive data</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int iFd  = _uart_open();</span></span><br><span class="line"><span class="comment">if(iFd &lt; 0)&#123;</span></span><br><span class="line"><span class="comment">perror(&quot;open fail&quot;);</span></span><br><span class="line"><span class="comment">return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">printf(&quot;open success,iFd=%d\n&quot;,iFd);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">uint16_t</span> num_sense = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//analysis</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">unsigned char verify_data[8] = &#123;0x01 ,0x03, 0x00, 0x00, 0x00, 0x06, 0xC5, 0xC8&#125;;</span></span><br><span class="line"><span class="comment">int w_result= _uart_write(verify_data, 8);</span></span><br><span class="line"><span class="comment">printf(&quot;write_result is%d\n&quot;,w_result);</span></span><br><span class="line"><span class="comment">printf(&quot;&quot;);</span></span><br><span class="line"><span class="comment">int size_read = _uart_read(buf, sizeof(buf));</span></span><br><span class="line"><span class="comment">int len_read = buf[2];</span></span><br><span class="line"><span class="comment">int size_all = 3 + len_read + 2;</span></span><br><span class="line"><span class="comment">while(size_read &lt; size_all)&#123;</span></span><br><span class="line"><span class="comment">size_read += _uart_read(buf + size_read, sizeof(buf) - size_read);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">printf(&quot;Read data length: %d\n&quot;,size_all);</span></span><br><span class="line"><span class="comment">for(i = 0; i &lt; size_all; i++) &#123;</span></span><br><span class="line"><span class="comment">printf(&quot;%02x &quot;, buf[i]);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">sizeof</span>(rec_data1) &lt; <span class="number">30</span>)&#123;</span><br><span class="line">analysis_s_part ana_s = analysis_s(rec_data1);</span><br><span class="line"><span class="keyword">if</span>(ana_s.Ia != <span class="number">0</span> || ana_s.Va != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(ana_s.Ia != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_s.Ia, <span class="number">0x0204</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_s.Va != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_s.Va, <span class="number">0x0206</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">num_sense ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_s.Ib != <span class="number">0</span> || ana_s.Vb != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(ana_s.Ib != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_s.Ib, <span class="number">0x0204</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_s.Vb != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_s.Vb, <span class="number">0x0206</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">num_sense ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_s.Ic != <span class="number">0</span> || ana_s.Vc != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(ana_s.Ic != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_s.Ic, <span class="number">0x0204</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_s.Vc != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_s.Vc, <span class="number">0x0206</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line">&#125;</span><br><span class="line">num_sense ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">analysis_l_part ana_l = analysis_l(buf);</span><br><span class="line"><span class="keyword">if</span>(ana_l.Ia != <span class="number">0</span> || ana_l.Va != <span class="number">0</span> || ana_l.Ca != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(ana_l.Ia != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_l.Ia, <span class="number">0x0204</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_l.Va != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_l.Va, <span class="number">0x0206</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_l.Ca != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_l.Ca, <span class="number">0x0202</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">num_sense ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_l.Ib != <span class="number">0</span> || ana_l.Vb != <span class="number">0</span> || ana_l.Cb != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(ana_l.Ib != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_l.Ib, <span class="number">0x0204</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_l.Vb != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_l.Vb, <span class="number">0x0206</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_l.Cb != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_l.Cb, <span class="number">0x0202</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">num_sense ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_l.Ic != <span class="number">0</span> || ana_l.Vc != <span class="number">0</span> || ana_l.Cc != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(ana_l.Ic != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_l.Ic, <span class="number">0x0204</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_l.Vc != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_l.Vc, <span class="number">0x0206</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_l.Cc != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_l.Cc, <span class="number">0x0202</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">num_sense ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//analysis_s_part ana_s = analysis_s(rec_data1);</span></span><br><span class="line"><span class="comment">//analysis_l_part ana_l = analysis_l(rec_data2);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// if (recvfrom(sockfd, recv_buf, sizeof(recv_buf), 0, NULL, NULL) &lt; 0) &#123;</span></span><br><span class="line"></span><br><span class="line">close(sock);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a><strong>运行结果</strong>：</h2><h2 id="sockaddr结构体"><a href="#sockaddr结构体" class="headerlink" title="sockaddr结构体"></a><strong>sockaddr结构体</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> &#123;</span>  </span><br><span class="line"><span class="type">char</span> *h_name; <span class="comment">/* 主机的官方域名 */</span>  </span><br><span class="line"><span class="type">char</span> **h_aliases; <span class="comment">/* 一个以NULL结尾的主机别名数组 */</span>  </span><br><span class="line"><span class="type">int</span> h_addrtype; <span class="comment">/* 返回的地址类型，在Internet环境下为AF-INET */</span>  </span><br><span class="line"><span class="type">int</span> h_length; <span class="comment">/* 地址的字节长度 */</span>  </span><br><span class="line"><span class="type">char</span> **h_addr_list; <span class="comment">/* 一个以0结尾的数组，包含该主机的所有地址*/</span>  </span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> &#123;</span>  </span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> sa_family;    <span class="comment">// address family, AF_xxx  </span></span><br><span class="line"><span class="type">char</span> sa_data[<span class="number">14</span>];    <span class="comment">// 14 bytes of protocol address  </span></span><br><span class="line">&#125;;  </span><br></pre></td></tr></table></figure><h3 id="sockaddr-in结构体"><a href="#sockaddr-in结构体" class="headerlink" title="sockaddr_in结构体"></a><strong>sockaddr_in结构体</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>   <span class="title">sockaddr_in</span>   &#123;</span>  </span><br><span class="line"><span class="type">short</span> <span class="type">int</span> sin_family;          <span class="comment">// Address family   </span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> <span class="type">int</span> sin_port;   <span class="comment">// Port number   </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span>       <span class="comment">/* Internet address */</span>  </span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> sin_zero[<span class="number">8</span>];     <span class="comment">/* Same size as struct sockaddr */</span>  </span><br><span class="line">&#125;;   </span><br><span class="line"><span class="class"><span class="keyword">struct</span>   <span class="title">in_addr</span>   &#123;</span>  </span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span>  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span> u_char s_b1,s_b2,s_b3,s_b4; &#125; S_un_b;  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span> u_short s_w1,s_w2; &#125; S_un_w;  </span><br><span class="line">u_long S_addr;   </span><br><span class="line">&#125; S_un;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a><strong>库函数</strong></h2><h3 id="标准库函数"><a href="#标准库函数" class="headerlink" title="标准库函数"></a><strong>标准库函数</strong></h3><h4 id="strcpy-strncpy-函数"><a href="#strcpy-strncpy-函数" class="headerlink" title="strcpy()/strncpy()函数"></a><strong>strcpy()/strncpy()函数</strong></h4><p>函数功能：把一个地址上的数据复制到另一个地址上去</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 函数原型</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">strcpy</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src)</span>;</span><br><span class="line"><span class="comment">//用法：把src这个地址的地址的字符串赋值到dest这个地址去</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">strncpy</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src, <span class="type">size_t</span> n)</span>;</span><br><span class="line"><span class="comment">//用法：把src这个地址的地址的n个字符串赋值到dest这个地址去</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 常见的指针与数组间的赋值问题</span></span><br><span class="line"><span class="type">char</span> a[] = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"><span class="type">char</span> b[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *p  = a;<span class="comment">//正确赋值，数组名为数组首元素地址，因此可使用指针保存该地址（指针只能保存地址）</span></span><br><span class="line">&gt;<span class="type">char</span>  c[<span class="number">3</span>]  = a;<span class="comment">//错误---》数组不能直接给数组赋值</span></span><br><span class="line"><span class="type">char</span>  d[<span class="number">3</span>] = p;<span class="comment">//错误---》指针不能直接给数组赋值</span></span><br><span class="line"><span class="built_in">strcpy</span>(b,a);<span class="comment">//正确，使用标准库函数可实现字符串拷贝</span></span><br><span class="line"><span class="type">char</span> **p1 = &amp;p;<span class="comment">//正确，二级指针可接收一级指针的地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>数组不能直接给数组赋值</li><li>指针不能直接给数组赋值</li></ul></blockquote><h4 id="perror函数"><a href="#perror函数" class="headerlink" title="perror函数"></a><strong>perror函数</strong></h4><p>函数功能：这个函数内部会自己获取errno的值，调用这个函数会直接把错误提示字符串打印出来。此外，我们也可以在错误提示字符串前添加一些自己想要打印的信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">perror</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span></span><br></pre></td></tr></table></figure><p>参数：</p><ol><li><strong>s</strong>：如果我们想要在错误提示字符串之前添加自己想要的打印信息，就通过此参数传入，如果不需要添加信息，则让其为空字符串即可。</li></ol><h3 id="套接字库函数"><a href="#套接字库函数" class="headerlink" title="套接字库函数"></a><strong>套接字库函数</strong></h3><h4 id="Socket-函数"><a href="#Socket-函数" class="headerlink" title="Socket() 函数"></a><strong>Socket() 函数</strong></h4><p>函数功能：在Linux下用socket()来创建套接字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">socket</span><span class="params">(<span class="type">int</span> af, <span class="type">int</span> type, <span class="type">int</span> protocol)</span></span><br></pre></td></tr></table></figure><p>参数：</p><ol><li><strong>af：</strong>地址族，也就是ip地址类型，常用的有<strong>AF_INET</strong>和<strong>AF_INET6</strong>。AF是”Address Family”的简写，INET是”Internet”的简写。前者表示IPv4地址，后者表示IPv6地址。</li><li><strong>type：</strong>数据传输方式/套接字类型，常用的有<strong>SOCK_STREAM（流格式套接字/面向连接的套接字）</strong>和<strong>SOCK_DGRAM（数据报套接字/无连接的套接字）</strong></li></ol><ul><li><strong>SOCK_STREAM</strong> 选择 <strong>TCP</strong> – 流式套接字   —&gt;Stream Sockets</li><li><strong>SOCK_DGRAM</strong> 选择 <strong>UDP</strong> – 数据报套接字  —&gt;Datagram Sockets</li></ul><ol start="3"><li><strong>protocol：</strong>传输协议，传0表示使用默认协议，常用的有<strong>IPPROTO_TCP</strong>和<strong>IPPTOTO_UDP</strong>，分别表示TCP协议和UDP协议。</li><li><strong>返回值：</strong>socket返回的值是一个文件描述符，SOCKET类型本身也是定义为int的，0,1,2分别表示标准输入、标准输出、标准错误，所以其他打开的文件描述符都会大于2； 错误时就返回 -1。</li></ol><h5 id="bind-函数"><a href="#bind-函数" class="headerlink" title="bind() 函数"></a><strong>bind() 函数</strong></h5><p>函数功能：绑定主机的IP地址和端口号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> PASCAL FAR <span class="title function_">bind</span><span class="params">(SOCKET s, <span class="type">const</span> <span class="keyword">struct</span> sockaddr* addr, <span class="type">socklen_t</span> addrlen)</span>;</span><br></pre></td></tr></table></figure><p>参数：</p><ol><li><strong>s</strong>：由socket()调用返回的并且未作连接的套接字描述符(套接字号)。</li><li><strong>addr</strong>：赋给套接字s的本地 IP 地址和端口号</li><li><strong>socklen_t</strong>：地址的大小长度。</li><li><strong>返回值</strong>：如果没有错误发生，bind()返回0。否则返回SOCKET_ERROR。</li></ol><h5 id="sendto-函数"><a href="#sendto-函数" class="headerlink" title="sendto() 函数"></a><strong>sendto() 函数</strong></h5><p>函数功能：用于UDP中发送数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">sendto</span><span class="params">(<span class="type">int</span> socket,<span class="type">const</span> <span class="type">void</span>* message,<span class="type">size_t</span> length,<span class="type">const</span> <span class="keyword">struct</span> sockaddr* dest_addr,<span class="type">socklen_t</span> dest_len)</span>;</span><br></pre></td></tr></table></figure><p>参数：</p><ol><li><strong>socket</strong>：套接字文件描述符</li><li><strong>message</strong>：你要发送的数据</li><li><strong>length</strong>：你要发送的数据大小，注意有多少写多少strlen</li><li><strong>flags</strong>：一般设置成 0</li><li><strong>dest_addr</strong>:对方的IP地址和端口号</li><li><strong>dest_len</strong>：结构体的大小</li><li><strong>返回值</strong>：成功：发送出去的字节</li></ol><p>失败：-1</p><h5 id="recvform-函数"><a href="#recvform-函数" class="headerlink" title="recvform() 函数"></a><strong>recvform() 函数</strong></h5><p>函数功能：用于UDP中接收数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">recvform</span><span class="params">(<span class="type">int</span> socket,<span class="type">void</span>* buffer,<span class="type">size_t</span> length,<span class="type">int</span> flags,<span class="keyword">struct</span> sockaddr* dest_addr,<span class="type">socklen_t</span>* address_len)</span>;</span><br></pre></td></tr></table></figure><p>参数：</p><ol><li><p><strong>socket</strong>：套接字文件描述符</p></li><li><p><strong>buffer</strong>：接受的数据存储在这里</p></li><li><p><strong>length</strong>：接受的数据的大小，以最大的来接受（sizeof）</p></li><li><p><strong>flags</strong>:一般设置成0</p></li><li><p><strong>address</strong>：存储客户端的IP地址和端口号，可以获取到是谁给你发送的</p></li><li><p><strong>address_len</strong>：结构体的大小</p></li><li><p><strong>返回值</strong>：成功：接收到的字节数</p><p>失败：-1</p></li></ol><h5 id="htons-ntons-函数"><a href="#htons-ntons-函数" class="headerlink" title="htons\ntons() 函数"></a><strong>htons\ntons() 函数</strong></h5><p>函数功能：端口转换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">htons</span><span class="params">(<span class="type">uint16_t</span> hostshort)</span>;   <span class="comment">//将主机端口号转成网络端口号</span></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">ntohs</span><span class="params">(<span class="type">uint16_t</span> netshort)</span>;    <span class="comment">//将网络端口号转成主机端口号</span></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">htonl</span><span class="params">(<span class="type">uint32_t</span> hostint32)</span>;   <span class="comment">//将32位主机字节序数据转换成网络字节序数据</span></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">ntohl</span><span class="params">(<span class="type">uint32_t</span> netint32)</span>;  <span class="comment">//将32位网络字节序数据转换成主机字节序数据</span></span><br></pre></td></tr></table></figure><p>参数：</p><ol><li><p><strong>返回值</strong>：成功：要转换的字节序</p><p>失败：-1</p></li></ol><h5 id="inet-addr-ntoa-函数"><a href="#inet-addr-ntoa-函数" class="headerlink" title="inet_addr\ntoa() 函数"></a><strong>inet_addr\ntoa() 函数</strong></h5><p>函数功能：</p><ol><li>将字符串形式的IP “192.168.102.169”转换为IPV4的32位无符号整型数的IP</li><li>将无符号整型数的ip，从主机端序转为网络端序</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">in_addr_t</span> <span class="title function_">inet_addr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *cp)</span>;    <span class="comment">//将主机IP转成网络IP</span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">inet_ntoa</span><span class="params">(<span class="keyword">struct</span> in_addr in)</span>;    <span class="comment">//将网络IP转成主机IP</span></span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a><strong>常见问题</strong></h2><blockquote><ol><li>当定义并调用 analysis_s(char *rec_data, float Ia, float Ib, float Ic, uint16_t Va, uint16_t Vb, uint16_t Vc) 时，各个返回值为0</li></ol><p><strong>解决方法</strong>：<br>将函数定义改为analysis_s(char *rec_data, float *Ia, float *Ib, float *Ic, uint16_t *Va, uint16_t *Vb, uint16_t *Vc)<br>将调用改为analysis_s(rec_data1,&amp;Ia_s, &amp;Ib_s, &amp;Ic_s, &amp;Va_s, &amp;Vb_s, &amp;Vc_s)<br>2. 在结构体当中，数值部分与实际数值相反，并且无法使用字节序转换函数进行转换，7.6对应的十六进制数应为40 F3 33 33，而结构体中正好相反。</p><p><strong>解决方法</strong>：<br>首先，因为该部分 value 数值在结构体中定义为 float 类型，所以无法直接在赋值时使用字节序转换函数。因此，需要直接在获取的结构体当中，通过数组互换的方式，来改变4个字节的值。</p><ol start="3"><li><br /></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用指令</title>
      <link href="/2023/04/27/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2023/04/27/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="1-第一次初始化"><a href="#1-第一次初始化" class="headerlink" title="1. 第一次初始化"></a><strong>1. 第一次初始化</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m ‘first commit’</span><br><span class="line">git remote add origin git@github.com:帐号名/仓库名.git</span><br><span class="line">git pull origin master</span><br><span class="line">git push origin master # -f 强推</span><br><span class="line">git clone git@github.com:git帐号名/仓库名.git</span><br></pre></td></tr></table></figure><h2 id="2-工作基本操作"><a href="#2-工作基本操作" class="headerlink" title="2. 工作基本操作"></a><strong>2. 工作基本操作</strong></h2><ul><li><p>git checkout master 切到主分支</p></li><li><p>git fetch origin 获取最新变更</p></li><li><p>git checkout -b dev origin/master 基于主分支创建dev分支</p></li><li><p>git add . 添加到缓存</p></li><li><p>git commit -m ‘xxx’ 提交到本地仓库</p></li><li><p>git fetch origin 获取最新变更</p></li></ul><h2 id="3-初始化仓库"><a href="#3-初始化仓库" class="headerlink" title="3. 初始化仓库"></a><strong>3. 初始化仓库</strong></h2><p>git init</p><h2 id="4-查看仓库当前状态"><a href="#4-查看仓库当前状态" class="headerlink" title="4. 查看仓库当前状态"></a><strong>4. 查看仓库当前状态</strong></h2><p>git status</p><h2 id="5-文件相关操作"><a href="#5-文件相关操作" class="headerlink" title="5. 文件相关操作"></a><strong>5. 文件相关操作</strong></h2><p><strong>将文件添加到仓库</strong>：</p><ul><li>git add 文件名 将工作区的某个文件添加到暂存区</li><li>git add . 将当前工作区的所有文件都加入暂存区</li><li>git add -u 添加所有被tracked文件中被修改或删除的文件信息到暂存区，不处理untracked的文件</li><li>git add -A 添加所有被tracked文件中被修改或删除的文件信息到暂存区，包括untracked的文件</li><li>git add -i 进入交互界面模式，按需添加文件到缓存区</li></ul><p><strong>将暂存区文件提交到本地仓库</strong>：</p><ul><li>git commit -m “提交说明” 将暂存区内容提交到本地仓库</li><li>git commit -a -m “提交说明” 跳过缓存区操作，直接把工作区内容提交到本地仓库</li></ul><p><strong>比较文件异同</strong></p><ul><li>git diff 工作区与暂存区的差异</li><li>git diff 分支名 工作区与某分支的差异，远程分支这样写：remotes/origin/分支名</li><li>git diff HEAD 工作区与HEAD指针指向的内容差异</li><li>git diff 提交id 文件路径 工作区某文件当前版本与历史版本的差异</li><li>git diff –stage 工作区文件与上次提交的差异(1.6 版本前用 –cached)</li><li>git diff 版本TAG 查看从某个版本后都改动内容</li><li>git diff 分支A 分支B 比较从分支A和分支B的差异(也支持比较两个TAG)</li><li>git diff 分支A…分支B 比较两分支在分开后各自的改动</li></ul><p>另外：如果只想统计哪些文件被改动，多少行被改动，可以添加 –stat 参数</p><h2 id="6-查看历史记录"><a href="#6-查看历史记录" class="headerlink" title="6. 查看历史记录"></a><strong>6. 查看历史记录</strong></h2><ul><li><p>git log 查看所有commit记录(SHA-A校验和，作者名称，邮箱，提交时间，提交说明)</p></li><li><p>git log -p -次数 查看最近多少次的提交记录</p></li><li><p>git log –stat 简略显示每次提交的内容更改</p></li><li><p>git log –name-only 仅显示已修改的文件清单</p></li><li><p>git log –name-status 显示新增，修改，删除的文件清单</p></li><li><p>git log –oneline 让提交记录以精简的一行输出</p></li><li><p>git log –graph –all –online 图形展示分支的合并历史</p></li><li><p>git log –author=作者 查询作者的提交记录(和grep同时使用要加一个–all–match参数)</p></li><li><p>git log –grep=过滤信息 列出提交信息中包含过滤信息的提交记录</p></li><li><p>git log -S查询内容 和–grep类似，S和查询内容间没有空格</p></li><li><p>git log fileName 查看某文件的修改记录</p></li></ul><h2 id="7-代码回滚"><a href="#7-代码回滚" class="headerlink" title="7. 代码回滚"></a><strong>7. 代码回滚</strong></h2><ul><li><p>git reset HEAD^ 恢复成上次提交的版本</p></li><li><p>git reset HEAD^^ 恢复成上上次提交的版本，就是多个^，以此类推或用~次数</p></li><li><p>git reflog</p></li><li><p>git reset –hard 版本号</p></li><li><p>–soft：只是改变HEAD指针指向，缓存区和工作区不变；</p></li><li><p>–mixed：修改HEAD指针指向，暂存区内容丢失，工作区不变；</p></li><li><p>–hard：修改HEAD指针指向，暂存区内容丢失，工作区恢复以前状态；</p></li></ul><h2 id="8-版本库相关操作"><a href="#8-版本库相关操作" class="headerlink" title="8. 版本库相关操作"></a><strong>8. 版本库相关操作</strong></h2><ul><li><p>删除版本库文件：git rm 文件名</p></li><li><p>版本库里的版本替换工作区的版本：git checkout — test.txt</p></li></ul><h2 id="9-远程仓库相关操作"><a href="#9-远程仓库相关操作" class="headerlink" title="9. 远程仓库相关操作"></a><strong>9. 远程仓库相关操作</strong></h2><p><strong>同步远程仓库</strong>：git push -u origin master<br /><strong>本地仓库内容推送到远程仓库</strong>：git remote add origin <a href="mailto:&#103;&#105;&#116;&#x40;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#x63;&#x6f;&#109;">&#103;&#105;&#116;&#x40;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#x63;&#x6f;&#109;</a>:帐号名/仓库名.git<br /><strong>从远程仓库克隆项目到本地</strong>：git clone <a href="mailto:&#103;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#x68;&#117;&#98;&#46;&#99;&#x6f;&#109;">&#103;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#x68;&#117;&#98;&#46;&#99;&#x6f;&#109;</a>:git帐号名/仓库名.git<br /><strong>查看远程库信息</strong>：git remote<br /><strong>拉取远程分支到本地仓库</strong>：</p><ul><li>git checkout -b 本地分支 远程分支 # 会在本地新建分支，并自动切换到该分支</li><li>git fetch origin 远程分支:本地分支 # 会在本地新建分支，但不会自动切换，还需checkout</li><li>git branch –set-upstream 本地分支 远程分支 # 建立本地分支与远程分支的链接</li></ul><p><strong>同步远程仓库更新</strong>：：git fetch origin master</p><h2 id="10-分支相关操作"><a href="#10-分支相关操作" class="headerlink" title="10. 分支相关操作"></a><strong>10. 分支相关操作</strong></h2><p><strong>创建分支</strong>：git checkout -b dev -b表示创建并切换分支</p><p>上面一条命令相当于一面的二条：</p><p>git branch dev 创建分支</p><p>git checkout dev 切换分支</p><p><strong>查看分支</strong>：git branch</p><p><strong>合并分支</strong>：</p><ul><li>git merge dev #用于合并指定分支到当前分支</li><li>git merge –no-ff -m “merge with no-ff” dev #加上–no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并</li></ul><p><strong>删除分支</strong>：git branch -d dev<br /><strong>查看分支合并图</strong>：git log –graph –pretty=oneline –abbrev-commit<br /><strong>修改分支名</strong>：<br />方法一：使用git命令操作修改本地分支名称<br />git branch -m oldBranchName newBranchName<br />方法二：使用git命令操作修改远程分支名称</p><ol><li>将本地分支的远程分支删除</li></ol><ul><li>git push origin :oldBranchName</li></ul><ol start="2"><li>将改名后的本地分支推送到远程，并将本地分支与之关联</li></ol><ul><li>git push –set-upstream origin newBranchName</li></ul><h2 id="11-git相关配置"><a href="#11-git相关配置" class="headerlink" title="11. git相关配置"></a>11. git相关配置</h2><p>安装完Git后第一件要做的事，设置用户信息(global可换成local在单独项目生效)：</p><ul><li>git config –global user.name “用户名” # 设置用户名</li><li>git config –global user.email “用户邮箱” #设置邮箱</li><li>git config –global user.name # 查看用户名是否配置成功</li><li>git config –global user.email # 查看邮箱是否配置</li></ul><h2 id="12-其他查看配置相关"><a href="#12-其他查看配置相关" class="headerlink" title="12. 其他查看配置相关"></a>12. 其他查看配置相关</h2><ul><li>git config –global –list # 查看全局设置相关参数列表</li><li>git config –local –list # 查看本地设置相关参数列表</li><li>git config –system –list # 查看系统配置参数列表</li><li>git config –list # 查看所有Git的配置(全局+本地+系统)</li><li>git config –global color.ui true //显示git相关颜色</li></ul><h2 id="13-撤消某次提交"><a href="#13-撤消某次提交" class="headerlink" title="13. 撤消某次提交"></a>13. 撤消某次提交</h2><ul><li>git revert HEAD # 撤销最近的一个提交</li><li>git revert 版本号 # 撤销某次commit</li></ul><h2 id="14-标签"><a href="#14-标签" class="headerlink" title="14. 标签"></a>14. 标签</h2><ul><li>git tag 标签 //打标签命令，默认为HEAD</li><li>git tag //显示所有标签</li><li>git tag 标签 版本号 //给某个commit版本添加标签</li><li>git show 标签 //显示某个标签的详细信息</li></ul><h2 id="15-git-删除已提交多余文件"><a href="#15-git-删除已提交多余文件" class="headerlink" title="15.git 删除已提交多余文件"></a>15.git 删除已提交多余文件</h2><ol><li>拉取远程仓到本地</li></ol><ul><li>git clone ××</li><li>cd ×××</li></ul><ol start="2"><li>查看分支</li></ol><ul><li>git branch -a</li></ul><ol start="3"><li>切换到想要操作的分支</li></ol><ul><li>git checkout 想要操作的分支</li></ul><ol start="4"><li>在本地仓库删除文件夹</li></ol><ul><li>git rm -r 我的文件夹/</li></ul><ol start="5"><li>提交代码</li></ol><ul><li>git commit -m”我的修改”</li></ul><ol start="6"><li>推送到远程仓库</li></ol><ul><li>git push origin 想要操作的分支</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用指令</title>
      <link href="/2023/04/27/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2023/04/27/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a><strong>常用指令</strong></h2><h4 id="复制到外部程序"><a href="#复制到外部程序" class="headerlink" title="复制到外部程序"></a><strong>复制到外部程序</strong></h4><ul><li>按住Shift键，使用鼠标选择需要复制的内容</li></ul><h4 id="查看系统和库函数"><a href="#查看系统和库函数" class="headerlink" title="查看系统和库函数"></a><strong>查看系统和库函数</strong></h4><ul><li><strong>man 1 xx</strong>：shell 命令。</li></ul><p>如：ls、vim，查询方法： man ls 或 man 1 ls</p><ul><li><strong>man 2 xx</strong>: 系统调用。</li></ul><p>如 man 2 read</p><ul><li><strong>man 3 xx</strong>: 库函数。</li></ul><p>如：man 3 fopen或 man fopen</p><h4 id="查看当前目录"><a href="#查看当前目录" class="headerlink" title="查看当前目录"></a><strong>查看当前目录</strong></h4><ul><li><p><strong>pwd</strong></p><h4 id="查看当前目录下的文件"><a href="#查看当前目录下的文件" class="headerlink" title="查看当前目录下的文件"></a><strong>查看当前目录下的文件</strong></h4></li><li><p><strong>ls -l</strong>        用于列出详细信息</p></li></ul><p><img src="/img/Linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4-1.png" alt="1682298888694.png"></p><p>权限   硬链接   所有者  所属的组   字节数  修改时间  文件名</p><ul><li><strong>ls -lh</strong>    单位是KB，而 -l 单位是B</li></ul><p><img src="/img/Linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4-2.png" alt="1682299667813.png"></p><ul><li>**ls -i **        查看inode</li></ul><p><img src="/img/Linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4-3.png" alt="1682299795949.png"></p><ul><li><strong>ls -la</strong>     查看所有的隐藏文件</li><li><strong>ls -lat</strong>     以时间顺序显示</li></ul><p><img src="/img/Linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4-4.png" alt="1682300085627.png"></p><ul><li><strong>ls -ld</strong>    只列出目录本身的信息</li></ul><p><img src="/img/Linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4-5.png" alt="1682300166136.png"></p><h4 id="寻找”｛”对应的右括号”｝”"><a href="#寻找”｛”对应的右括号”｝”" class="headerlink" title="寻找”｛”对应的右括号”｝”"></a><strong>寻找”｛”对应的右括号”｝”</strong></h4><p>按 <strong>%</strong> 即可定位</p><h2 id="运行C语言程序"><a href="#运行C语言程序" class="headerlink" title="运行C语言程序"></a><strong>运行C语言程序</strong></h2><h4 id="1-创建一个文件并命名"><a href="#1-创建一个文件并命名" class="headerlink" title="1. 创建一个文件并命名"></a>1. 创建一个文件并命名</h4><ul><li><p><strong>touch main.c</strong></p><h4 id="2-用vim工具打开这个文件并编写代码-以下任意代码皆可"><a href="#2-用vim工具打开这个文件并编写代码-以下任意代码皆可" class="headerlink" title="2. 用vim工具打开这个文件并编写代码,以下任意代码皆可"></a>2. 用vim工具打开这个文件并编写代码,以下任意代码皆可</h4></li><li><p><strong>vim main.c</strong></p></li><li><p><strong>vi main.c</strong></p><h4 id="3-编写完代码后，开始使用Linux自带的C语言编译器-gcc-编译"><a href="#3-编写完代码后，开始使用Linux自带的C语言编译器-gcc-编译" class="headerlink" title="3. 编写完代码后，开始使用Linux自带的C语言编译器(gcc)编译"></a>3. 编写完代码后，开始使用Linux自带的C语言编译器(gcc)编译</h4></li><li><p><strong>gcc main.c</strong></p><h4 id="4-编译后，会默认生成-a-out-文件，如果不想以-a-out-命名，输入以下指令，可生成一个-test-out-文件"><a href="#4-编译后，会默认生成-a-out-文件，如果不想以-a-out-命名，输入以下指令，可生成一个-test-out-文件" class="headerlink" title="4. 编译后，会默认生成 a.out 文件，如果不想以 a.out 命名，输入以下指令，可生成一个 test.out 文件"></a>4. 编译后，会默认生成 a.out 文件，如果不想以 a.out 命名，输入以下指令，可生成一个 test.out 文件</h4></li><li><p><strong>gcc main.c -o test.out</strong></p><h4 id="5-通过指令查看目录下是否生成相应文件"><a href="#5-通过指令查看目录下是否生成相应文件" class="headerlink" title="5. 通过指令查看目录下是否生成相应文件"></a>5. 通过指令查看目录下是否生成相应文件</h4></li><li><p><strong>ls -l</strong>        用于列出详细信息</p><h4 id="6-运行-main-out-文件-输出结果"><a href="#6-运行-main-out-文件-输出结果" class="headerlink" title="6. 运行 main.out 文件,输出结果"></a>6. 运行 main.out 文件,输出结果</h4></li><li><p>**./main.out **</p></li></ul><h2 id="修改文件名"><a href="#修改文件名" class="headerlink" title="修改文件名"></a><strong>修改文件名</strong></h2><h3 id="1-使用mv命令"><a href="#1-使用mv命令" class="headerlink" title="1.使用mv命令"></a><strong>1.使用mv命令</strong></h3><p>**mv a.txt a1.txt     **将a.txt修改为a1.txt</p><ul><li><p>-b: 当目标文件或目录存在时，在执行覆盖前，会为其创建一个备份。</p></li><li><p>-i: 如果指定移动的源目录或文件与目标的目录或文件同名，则会先询问是否覆盖旧文件，输入 y 表示直接覆盖，输入 n 表示取消该操作。</p></li><li><p>-f: 如果指定移动的源目录或文件与目标的目录或文件同名，不会询问，直接覆盖旧文件。</p></li><li><p>-n: 不要覆盖任何已存在的文件或目录。</p></li><li><p>-u：当源文件比目标文件新或者目标文件不存在时，才执行移动操作。</p></li></ul><h3 id="2-使用cp命令"><a href="#2-使用cp命令" class="headerlink" title="2.使用cp命令"></a><strong>2.使用cp命令</strong></h3><p>**cp a.txt a1.txt &amp;&amp; rm -f a.txt      **复制一个新文件(cp)，再删除旧文件(rm)</p><ul><li>-a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合。</li><li>-d：复制时保留链接。这里所说的链接相当于 Windows 系统中的快捷方式。</li><li>-f：覆盖已经存在的目标文件而不给出提示。</li><li>-i：与 -f 选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答 y 时目标文件将被覆盖。</li><li>-p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。</li><li>-r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。</li><li>-l：不复制文件，只是生成链接文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS1226F</title>
      <link href="/2023/04/09/CS1226F/"/>
      <url>/2023/04/09/CS1226F/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="89383af6bdd04f931a888850234f2d4fd25b4c692ec110ca7421a98def68c045"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年终总结</title>
      <link href="/2023/01/05/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>/2023/01/05/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c45fc31b1c80ca184d0b8d78330961080bbbff52d572ed010558c59221225652"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>照片</title>
      <link href="/Gallery/index.html"/>
      <url>/Gallery/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="😎关于我"><a href="#😎关于我" class="headerlink" title="😎关于我"></a>😎关于我</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Name: Giulio</span><br><span class="line">Email: yig350@163.com</span><br><span class="line">Blog: blog.giulio.top</span><br><span class="line">ChatGPT: chat.giulio.top</span><br><span class="line">Github: github.com/giulioo233</span><br><span class="line">CSDN: blog.csdn.net/weixin_43291101</span><br><span class="line">Leetcode: leetcode.cn/u/hua-shui-de-zy/</span><br></pre></td></tr></table></figure><ul><li>男</li><li>2000年5月19日 </li><li>浙江温州/杭州</li><li>INFJ（目前是，以后不一定）</li><li>喜欢听音乐</li><li>喜欢玩游戏</li><li>学吉他ing</li><li>其他内容正在编写……</li></ul><h4 id="💁‍♂️社交平台"><a href="#💁‍♂️社交平台" class="headerlink" title="💁‍♂️社交平台"></a>💁‍♂️社交平台</h4><ul><li>QQ: <a href="tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=183380423&website=www.oicqzone.com">183380423</a></li><li>微博: <a href="https://weibo.com/u/5109338987">某詹同学-</a></li><li>微博小号（用来发疯，暂不公开🥵）</li><li>豆瓣: <a href="https://www.douban.com/people/173103476/?_i=9924377IZqsxwN">某詹同学</a></li><li>Bilibili:  <a href="https://space.bilibili.com/11516915">Hooray__</a></li><li>Instagram: <a href="https://www.instagram.com/p/B5IJGgTnTcI/?igshid=NTc4MTIwNjQ2YQ==">giulio_aaa</a> （需要魔法）</li><li><a href="https://c6.y.qq.com/base/fcgi-bin/u?__=NENnjvUzwBe9">QQ音乐</a></li><li><a href="https://kg.qq.com/node/personal?uid=639e95872c29308232">全民K歌</a>（慎点，伤了耳朵概不负责）</li></ul><hr><h2 id="😎关于本站"><a href="#😎关于本站" class="headerlink" title="😎关于本站"></a>😎关于本站</h2><p>本站建立于2023年1月7日，当时的我深陷焦虑症的困扰中，为了寻找一种宣泄和疏解的方式，我决定了搭建个人博客。这个博客成为了我情绪的出口，让我能够更加自然地倾诉自己的感受。在这个短视频盛行的浮躁年代，写点文字可以让我内心多一些平静，少一些焦虑。</p><p>同时，我也发现自己表达能力极差，所以也想借此提升一下。</p><p>本站不求访问量。</p><p>如果你碰巧光临了本站，祝你天天开心，早安，午安，晚安。🌞</p><h4 id="📝博客大事件"><a href="#📝博客大事件" class="headerlink" title="📝博客大事件"></a>📝博客大事件</h4><blockquote><ul><li><p>2023年07月13日</p><p>引入Twikoo评论系统，并修复Artitalk和部分图片及表情包无法访问的问题</p></li><li><p>2023年07月03日</p><p>将博客和Artitalk映射到个人域名，博客域名正式变更为 blog.giulio.top</p></li><li><p>2023年06月30日</p><p>购买个人域名 giulio.top (难听点叫白嫖)</p></li><li><p>2023年02月03日</p><p>发表了第一篇博文<a href="https://blog.giulio.top/2023/01/05/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/">《2022年终总结》</a></p></li><li><p>2023年01月07日</p><p>一时兴起，利用hexo框架搭建了本站，并部署在github</p></li></ul></blockquote><hr><h2 id="💁‍♂️版权声明"><a href="#💁‍♂️版权声明" class="headerlink" title="💁‍♂️版权声明"></a>💁‍♂️版权声明</h2><p>本站部分内容转载于网络， 仅供学习和研究使用，版权归作者所有，如果无意之中侵犯了您的版权，请来信告知【联系方式可见侧边栏有关内容】，本站将在第一时间删除。</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/assets/custom.css"/>
      <url>/assets/custom.css</url>
      
        <content type="html"><![CDATA[hr {    box-sizing: content-box;    height: 0;    overflow: visible;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>发牢骚专区</title>
      <link href="/shuoshuo/index.html"/>
      <url>/shuoshuo/index.html</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="https://unpkg.com/artitalk"></script><!-- 存放说说的容器 --><div id="artitalk_main"></div><script>new Artitalk({    appId: '6MDAke4f1KihuGEy0o2a8qxM-MdYXbMMI', // Your LeanCloud appId    appKey: 'qvRNTWsjLR1ACcdgrtBewsAR', // Your LeanCloud appKey    pageSize: 10,    atEmoji: {                  "bilibili_tv_gif-doge": "https://bu.dusays.com/2021/01/15/3de5568861758.gif",    "bilibili_tv_gif-亲亲": "https://bu.dusays.com/2021/01/15/48f8fb39734fd.gif",    "bilibili_tv_gif-偷笑": "https://bu.dusays.com/2021/01/15/f7272fe624fae.gif",    "bilibili_tv_gif-再见": "https://bu.dusays.com/2021/01/15/8252ffdb2cd6c.gif",    "bilibili_tv_gif-发怒": "https://bu.dusays.com/2021/01/15/6fc804d102f33.gif",    "bilibili_tv_gif-发财": "https://bu.dusays.com/2021/01/15/934731e956a6d.gif",    "bilibili_tv_gif-可爱": "https://bu.dusays.com/2021/01/15/df742ca600b6f.gif",    "bilibili_tv_gif-吐血": "https://bu.dusays.com/2021/01/15/825e474035d41.gif",    "bilibili_tv_gif-呆": "https://bu.dusays.com/2021/01/15/dc01b83c8b63c.gif",    "bilibili_tv_gif-呕吐": "https://bu.dusays.com/2021/01/15/e84d2b2f164d5.gif",    "bilibili_tv_gif-困": "https://bu.dusays.com/2021/01/15/1ebb4265e35d6.gif",    "bilibili_tv_gif-坏笑": "https://bu.dusays.com/2021/01/15/0d4b84c868ac1.gif",    "bilibili_tv_gif-大佬": "https://bu.dusays.com/2021/01/15/554bc754252fb.gif",    "bilibili_tv_gif-大哭": "https://bu.dusays.com/2021/01/15/a61cf83e2a393.gif",    "bilibili_tv_gif-委屈": "https://bu.dusays.com/2021/01/15/bb706ad009ca3.gif",    "bilibili_tv_gif-害羞": "https://bu.dusays.com/2021/01/15/6783d7b3f85b5.gif",    "bilibili_tv_gif-尴尬": "https://bu.dusays.com/2021/01/15/94fde68114d10.gif",    "bilibili_tv_gif-微笑": "https://bu.dusays.com/2021/01/15/ae8b966f5d6dd.gif",    "bilibili_tv_gif-思考": "https://bu.dusays.com/2021/01/15/4779160502ea4.gif",    "bilibili_tv_gif-惊吓": "https://bu.dusays.com/2021/01/15/cf308976cfcff.gif",    "bilibili_tv_gif-打脸": "https://bu.dusays.com/2021/01/15/1e73ac65adedb.gif",    "bilibili_tv_gif-抓狂": "https://bu.dusays.com/2021/01/15/a9a2816b47155.gif",    "bilibili_tv_gif-抠鼻子": "https://bu.dusays.com/2021/01/15/da0e09a7df77c.gif",    "bilibili_tv_gif-斜眼笑": "https://bu.dusays.com/2021/01/15/ef02f8604d8da.gif",    "bilibili_tv_gif-无奈": "https://bu.dusays.com/2021/01/15/34f110a029e9f.gif",    "bilibili_tv_gif-晕": "https://bu.dusays.com/2021/01/15/3c1ec79da1798.gif",    "bilibili_tv_gif-流汗": "https://bu.dusays.com/2021/01/15/f8476b1819899.gif",    "bilibili_tv_gif-流鼻血": "https://bu.dusays.com/2021/01/15/0c7f2fc4aa9ac.gif",    "bilibili_tv_gif-点赞": "https://bu.dusays.com/2021/01/15/3a52c830b19d1.gif",    "bilibili_tv_gif-生气": "https://bu.dusays.com/2021/01/15/52386ddb3e00b.gif",    "bilibili_tv_gif-生病": "https://bu.dusays.com/2021/01/15/a196e70f1892d.gif",    "bilibili_tv_gif-疑问": "https://bu.dusays.com/2021/01/15/5df1be7cebfcc.gif",    "bilibili_tv_gif-白眼": "https://bu.dusays.com/2021/01/15/dde92b9d44d0a.gif",    "bilibili_tv_gif-睡着": "https://bu.dusays.com/2021/01/15/fde17be95e29a.gif",    "bilibili_tv_gif-笑哭": "https://bu.dusays.com/2021/01/15/6c2742bef700b.gif",    "bilibili_tv_gif-腼腆": "https://bu.dusays.com/2021/01/15/c23c85b649289.gif",    "bilibili_tv_gif-色": "https://bu.dusays.com/2021/01/15/f75d5f33ae1df.gif",    "bilibili_tv_gif-调皮": "https://bu.dusays.com/2021/01/15/1d06267e48ecb.gif",    "bilibili_tv_gif-鄙视": "https://bu.dusays.com/2021/01/15/5696d02abd653.gif",    "bilibili_tv_gif-闭嘴": "https://bu.dusays.com/2021/01/15/1f90ef05d7af2.gif",    "bilibili_tv_gif-难过": "https://bu.dusays.com/2021/01/15/7535d32a53d50.gif",    "bilibili_tv_gif-馋": "https://bu.dusays.com/2021/01/15/13375b80ddacb.gif",    "bilibili_tv_gif-黑人问号": "https://bu.dusays.com/2021/01/15/48f24129bf37c.gif",    "bilibili_tv_gif-鼓掌": "https://bu.dusays.com/2021/01/15/d7e60de1a2e5b.gif",    "bilibili_2333-卖萌": "https://bu.dusays.com/2021/01/15/eee46d6d5a9a7.png",    "bilibili_2333-吃惊": "https://bu.dusays.com/2021/01/15/82414bf5701da.png",    "bilibili_2333-吐魂": "https://bu.dusays.com/2021/01/15/986fc5d20428e.png",    "bilibili_2333-喝水": "https://bu.dusays.com/2021/01/15/b5f4ba8697b7c.png",    "bilibili_2333-困惑": "https://bu.dusays.com/2021/01/15/97cd007660867.png",    "bilibili_2333-大哭": "https://bu.dusays.com/2021/01/15/5d51eed0bc32e.png",    "bilibili_2333-大笑": "https://bu.dusays.com/2021/01/15/1bc13fa6b2808.png",    "bilibili_2333-委屈": "https://bu.dusays.com/2021/01/15/792a38a3f869a.png",    "bilibili_2333-怒": "https://bu.dusays.com/2021/01/15/afdc8a169fca7.png",    "bilibili_2333-无言": "https://bu.dusays.com/2021/01/15/d70e26ff28a71.png",    "bilibili_2333-汗": "https://bu.dusays.com/2021/01/15/221048f2715fd.png",    "bilibili_2333-疑问": "https://bu.dusays.com/2021/01/15/e9683e1304811.png",    "bilibili_2333-第一": "https://bu.dusays.com/2021/01/15/1bd6e6b2f774c.png",    "bilibili_2333-耶": "https://bu.dusays.com/2021/01/15/8498b011bfd24.png",    "bilibili_2333-郁闷": "https://bu.dusays.com/2021/01/15/9e8b3502e6d5e.png",    "bilibili_face-2020": "https://bu.dusays.com/2021/01/15/6657b9464d18d.png",    "bilibili_face-doge": "https://bu.dusays.com/2021/01/15/6f75465c22900.png",    "bilibili_face-ok": "https://bu.dusays.com/2021/01/15/87b68e5f8285f.png",    "bilibili_face-yes": "https://bu.dusays.com/2021/01/15/79accb05c43a6.png",    "bilibili_face-偷笑": "https://bu.dusays.com/2021/01/15/23dedc01a6eaa.png",    "bilibili_face-傲娇": "https://bu.dusays.com/2021/01/15/a3a2001f6d091.png",    "bilibili_face-再见": "https://bu.dusays.com/2021/01/15/e38253df54ca7.png",    "bilibili_face-冷": "https://bu.dusays.com/2021/01/15/459b38e53753a.png",    "bilibili_face-口罩": "https://bu.dusays.com/2021/01/15/67fc0d9e50456.png",    "bilibili_face-可乐": "https://bu.dusays.com/2021/01/15/25291732cbb6c.png",    "bilibili_face-吃瓜": "https://bu.dusays.com/2021/01/15/ae7123c9db9c2.png",    "bilibili_face-吐": "https://bu.dusays.com/2021/01/15/3b88377796a2d.png",    "bilibili_face-吓": "https://bu.dusays.com/2021/01/15/5d0c8b05661a9.png",    "bilibili_face-呆": "https://bu.dusays.com/2021/01/15/5cb10a1c8ed1c.png",    "bilibili_face-呲牙": "https://bu.dusays.com/2021/01/15/1909482b26059.png",    "bilibili_face-哈欠": "https://bu.dusays.com/2021/01/15/7e8693f9f6e0d.png",    "bilibili_face-响指": "https://bu.dusays.com/2021/01/15/2e75e0f53a0d8.png",    "bilibili_face-喜极而泣": "https://bu.dusays.com/2021/01/15/cfd87605807a3.png",    "bilibili_face-喜欢": "https://bu.dusays.com/2021/01/15/2f770050b7b6b.png",    "bilibili_face-嘘声": "https://bu.dusays.com/2021/01/15/15686aa6be4a4.png",    "bilibili_face-囧": "https://bu.dusays.com/2021/01/15/3d50f3580a71c.png",    "bilibili_face-大哭": "https://bu.dusays.com/2021/01/15/9977f0d631c34.png",    "bilibili_face-大笑": "https://bu.dusays.com/2021/01/15/175b92b044f25.png",    "bilibili_face-大闹": "https://bu.dusays.com/2021/01/15/97dd888cd3e01.png",    "bilibili_face-奋斗": "https://bu.dusays.com/2021/01/15/a52f0a7b9f1f0.png",    "bilibili_face-奸笑": "https://bu.dusays.com/2021/01/15/d577e0c1a38ed.png",    "bilibili_face-妙啊": "https://bu.dusays.com/2021/01/15/7bee01e34214e.png",    "bilibili_face-委屈": "https://bu.dusays.com/2021/01/15/b1159d77b7031.png",    "bilibili_face-嫌弃": "https://bu.dusays.com/2021/01/15/f058d169ddb38.png",    "bilibili_face-害羞": "https://bu.dusays.com/2021/01/15/0d9191604bb8c.png",    "bilibili_face-寒冷": "https://bu.dusays.com/2021/01/15/459b38e53753a.png",    "bilibili_face-尴尬": "https://bu.dusays.com/2021/01/15/cb0ee85bad423.png",    "bilibili_face-开心": "https://bu.dusays.com/2021/01/15/6193deb22a02a.png",    "bilibili_face-弹弹堂": "https://bu.dusays.com/2021/01/15/f20941c719a68.png",    "bilibili_face-微微笑": "https://bu.dusays.com/2021/01/15/3bd9cf1df5f70.png",    "bilibili_face-微笑": "https://bu.dusays.com/2021/01/15/7f2780905da9b.png",    "bilibili_face-思考": "https://bu.dusays.com/2021/01/15/1e3ebbb02fb2a.png",    "bilibili_face-惊呆了": "https://bu.dusays.com/2021/01/15/5c8f275dd46f9.png",    "bilibili_face-惊喜": "https://bu.dusays.com/2021/01/15/7592147d58d76.png",    "bilibili_face-惊讶": "https://bu.dusays.com/2021/01/15/d953bc379d17c.png",    "bilibili_face-打call": "https://bu.dusays.com/2021/01/15/008df63abd581.png",    "bilibili_face-抠鼻": "https://bu.dusays.com/2021/01/15/ab7497db95a84.png",    "bilibili_face-抱拳": "https://bu.dusays.com/2021/01/15/18004b4344583.png",    "bilibili_face-拜托": "https://bu.dusays.com/2021/01/15/bbf6aec9c45f9.png",    "bilibili_face-拥抱": "https://bu.dusays.com/2021/01/15/acbea08a11b35.png",    "bilibili_face-捂脸": "https://bu.dusays.com/2021/01/15/6ae11230d7142.png",    "bilibili_face-撇嘴": "https://bu.dusays.com/2021/01/15/45e4954292446.png",    "bilibili_face-支持": "https://bu.dusays.com/2021/01/15/23b9ba925b473.png",    "bilibili_face-无奈": "https://bu.dusays.com/2021/01/15/9f7c2bd341c80.png",    "bilibili_face-无语": "https://bu.dusays.com/2021/01/15/379e19c599db6.png",    "bilibili_face-期待": "https://bu.dusays.com/2021/01/15/1a91b3d40e9df.png",    "bilibili_face-武汉加油": "https://bu.dusays.com/2021/01/15/d8dd7da3f736a.png",    "bilibili_face-滑稽": "https://bu.dusays.com/2021/01/15/4e19d3b6573b7.png",    "bilibili_face-灵魂出窍": "https://bu.dusays.com/2021/01/15/408e1f4535284.png",    "bilibili_face-点赞": "https://bu.dusays.com/2021/01/15/b658d3bfd4e1c.png",    "bilibili_face-爱心": "https://bu.dusays.com/2021/01/15/45528ce0b70e5.png",    "bilibili_face-生气": "https://bu.dusays.com/2021/01/15/f50bd87895980.png",    "bilibili_face-生病": "https://bu.dusays.com/2021/01/15/0af5af905007c.png",    "bilibili_face-画风突变": "https://bu.dusays.com/2021/01/15/e8b0405639e65.png",    "bilibili_face-疑问": "https://bu.dusays.com/2021/01/15/a40f4b5049988.png",    "bilibili_face-疼": "https://bu.dusays.com/2021/01/15/54f84b5caeb30.png",    "bilibili_face-白眼": "https://bu.dusays.com/2021/01/15/999802ffac7b3.png",    "bilibili_face-福": "https://bu.dusays.com/2021/01/15/f791f8872ba73.png",    "bilibili_face-福到了": "https://bu.dusays.com/2021/01/15/521fdf8179cf6.png",    "bilibili_face-笑哭": "https://bu.dusays.com/2021/01/15/e73bdebdbe1be.png",    "bilibili_face-肌肉": "https://bu.dusays.com/2021/01/15/b51c66000ca7c.png",    "bilibili_face-脸红": "https://bu.dusays.com/2021/01/15/17a6a72df82b4.png",    "bilibili_face-调皮": "https://bu.dusays.com/2021/01/15/d0b51d875994c.png",    "bilibili_face-跪": "https://bu.dusays.com/2021/01/15/111d3c55650a1.png",    "bilibili_face-酷": "https://bu.dusays.com/2021/01/15/da2f7b01b3045.png",    "bilibili_face-酸了": "https://bu.dusays.com/2021/01/15/f768bd9e30c0a.png",    "bilibili_face-锦鲤": "https://bu.dusays.com/2021/01/15/4779553cdbd04.png",    "bilibili_face-阴险": "https://bu.dusays.com/2021/01/15/489a2327a717e.png",    "bilibili_face-难过": "https://bu.dusays.com/2021/01/15/c1107a3b72d80.png",    "bilibili_face-鸡腿": "https://bu.dusays.com/2021/01/15/847ce240d7ed5.png",    "bilibili_face-黑洞": "https://bu.dusays.com/2021/01/15/740232949428d.png"            },    serverURL: 'https://api.giulio.top'})</script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>留言板</title>
      <link href="/messageboard/index.html"/>
      <url>/messageboard/index.html</url>
      
        <content type="html"><![CDATA[<blockquote><h1 id="留言须知"><a href="#留言须知" class="headerlink" title="留言须知:"></a><strong>留言须知</strong>:</h1><p>✅对此博客有任何疑问欢迎留言</p><p>✅如果你有什么想吐槽欢迎留言</p><p>✅如果你有什么建议的欢迎留言</p><p>❌严禁在此处打广告</p><p>❌严禁发表不良内容</p></blockquote>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
