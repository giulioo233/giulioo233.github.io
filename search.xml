<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Socket网络编程</title>
      <link href="/2023/05/10/Socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/05/10/Socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>环境：Linux<br />协议：UDP</p></blockquote><h2 id="网络知识"><a href="#网络知识" class="headerlink" title="网络知识"></a><strong>网络知识</strong></h2><h3 id="UDP简介"><a href="#UDP简介" class="headerlink" title="UDP简介"></a><strong>UDP简介</strong></h3><p>UDP全称 User Datagram Protocol，即：用户数据报协议。是面向无连接的协议。通常，UDP 通信还会被冠以<strong>不可靠</strong>的头衔。这里的不可靠指的是：无法可靠地得知对方是否收到数据。<br />UDP有如下特征：</p><ul><li>无连接：通信双方不需要事先连接</li><li>无确认：收到数据不给对方发回执确认</li><li>不保证有序、丢失不重发</li><li>采用帧同步的数据报通信方式（即通信双方每次的收发数据量相等）<br>:::<br>简单来讲，UDP 类似于寄信，如果两个人除了信件之外没有任何别的通信方式，那么信件寄出去了之后，寄件人是无法得知收件人是否收到信件或者是否已经读取内容的。UDP 的特点是无需连接、无需确认、无需缓冲区和分包序列号，因此 UDP 的效率是比较高的。</li></ul><h3 id="UDP通信流程"><a href="#UDP通信流程" class="headerlink" title="UDP通信流程"></a><strong>UDP通信流程</strong></h3><ul><li>发送方：<ol><li>创建 UDP 套接字： int fd = socket();</li><li>准备好接收方的地址：struct sockaddr_in peerAddr;</li><li>给对方发送 UDP 数据报：sendto(fd, peerAddr);</li></ol></li><li>接收方：<ol><li>创建 UDP 套接字：int fd = socket();</li><li>准备好自己的地址：struct sockaddr_in addr;</li><li>绑定套接字和地址：bind(fd, addr);</li><li>坐等各方发来的 UDP 数据报：recvfrom(fd);<br>:::<br><a name="dD1uj"></a><h4 id="如何理解套接字"><a href="#如何理解套接字" class="headerlink" title="如何理解套接字"></a>如何理解套接字</h4><img src="https://cdn.nlark.com/yuque/0/2023/png/35559460/1682305851332-632f05e9-04d7-41f4-a4d7-4f1a057074dd.png#averageHue=%23f6f6f6&clientId=uef4ecad0-8f43-4&from=paste&id=nuMHU&originHeight=653&originWidth=490&originalType=url&ratio=1&rotation=0&showTitle=false&size=195818&status=done&style=none&taskId=u2484d102-79f4-4939-adc5-3df4f2609e1&title=" alt="image.png"></li></ol></li></ul><h2 id="编程实例"><a href="#编程实例" class="headerlink" title="编程实例"></a>编程实例</h2><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/ip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 5000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_IP <span class="string">&quot;192.168.6.5&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IVVER_LEN 17</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROVER_LEN 85</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">float</span> Ia;</span><br><span class="line"><span class="type">float</span> Ib;</span><br><span class="line"><span class="type">float</span> Ic;</span><br><span class="line"><span class="type">uint16_t</span> Va;</span><br><span class="line"><span class="type">uint16_t</span> Vb;</span><br><span class="line"><span class="type">uint16_t</span> Vc;</span><br><span class="line">&#125; analysis_s_part;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">float</span> Ia;</span><br><span class="line"><span class="type">float</span> Ib;</span><br><span class="line"><span class="type">float</span> Ic;</span><br><span class="line"><span class="type">uint16_t</span> Va;</span><br><span class="line"><span class="type">uint16_t</span> Vb;</span><br><span class="line"><span class="type">uint16_t</span> Vc;</span><br><span class="line"><span class="type">float</span> Ca;</span><br><span class="line"><span class="type">float</span> Cb;</span><br><span class="line"><span class="type">float</span> Cc;</span><br><span class="line">&#125; analysis_l_part;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sense_part</span>&#123;</span></span><br><span class="line"><span class="type">uint16_t</span> type;<span class="comment">//类型</span></span><br><span class="line"><span class="type">uint16_t</span> number;<span class="comment">//编号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">content_part</span> &#123;</span></span><br><span class="line"><span class="type">uint32_t</span> ticks;<span class="comment">//时间戳</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sense_part</span> <span class="title">sense</span>;</span><span class="comment">//感知部分</span></span><br><span class="line"><span class="type">float</span> value;<span class="comment">//量值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">udp_request</span> &#123;</span></span><br><span class="line"><span class="type">uint8_t</span> forward;<span class="comment">//前导</span></span><br><span class="line"><span class="type">uint8_t</span> reserve;<span class="comment">//保留位，填充信息</span></span><br><span class="line"><span class="type">uint16_t</span> version;<span class="comment">//版本</span></span><br><span class="line"><span class="type">uint16_t</span> length;<span class="comment">//长度</span></span><br><span class="line"><span class="type">uint16_t</span> verify;<span class="comment">//校验</span></span><br><span class="line"><span class="type">uint16_t</span> command;<span class="comment">//指令</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">content_part</span> <span class="title">content</span>;</span><span class="comment">//内容部分</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment">* Name:    CRC-16/MODBUS       x16+x15+x2+1</span></span><br><span class="line"><span class="comment">* Poly:    0x8005</span></span><br><span class="line"><span class="comment">* Init:    0xFFFF</span></span><br><span class="line"><span class="comment">* Refin:   True</span></span><br><span class="line"><span class="comment">* Refout:  True</span></span><br><span class="line"><span class="comment">* Xorout:  0x0000</span></span><br><span class="line"><span class="comment">* Note:</span></span><br><span class="line"><span class="comment">*****************************************************************************/</span></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">crc16_modbus</span><span class="params">(<span class="type">uint8_t</span> *data, <span class="type">uint16_t</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> i;</span><br><span class="line"><span class="type">uint16_t</span> crc = <span class="number">0xffff</span>;        <span class="comment">// Initial value</span></span><br><span class="line"><span class="keyword">while</span>(length--)</span><br><span class="line">&#123;</span><br><span class="line">crc ^= *data++;            <span class="comment">// crc ^= *data; data++;</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (crc &amp; <span class="number">1</span>)</span><br><span class="line">crc = (crc &gt;&gt; <span class="number">1</span>) ^ <span class="number">0xA001</span>;        <span class="comment">// 0xA001 = reverse 0x8005</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">crc = (crc &gt;&gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> crc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//报文解析</span></span><br><span class="line"><span class="comment">//DianliuDianyaBan</span></span><br><span class="line">analysis_s_part <span class="title function_">analysis_s</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *rec_data)</span>&#123;</span><br><span class="line">analysis_s_part ana_s;</span><br><span class="line"><span class="type">uint8_t</span> DataLength_Short = rec_data[<span class="number">2</span>];</span><br><span class="line"><span class="type">float</span> ElectricityA1 =(rec_data[<span class="number">3</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">4</span>]);</span><br><span class="line"><span class="type">float</span> ElectricityA = ElectricityA1/<span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> ElectricityB1 =(rec_data[<span class="number">5</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">6</span>]);</span><br><span class="line"><span class="type">float</span> ElectricityB = ElectricityB1/<span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> ElectricityC1 =(rec_data[<span class="number">7</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">8</span>]);</span><br><span class="line"><span class="type">float</span> ElectricityC = ElectricityC1/<span class="number">10</span>;</span><br><span class="line"><span class="type">uint16_t</span> VoltageA = rec_data[<span class="number">9</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">10</span>];</span><br><span class="line"><span class="type">uint16_t</span> VoltageB = rec_data[<span class="number">11</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">12</span>];</span><br><span class="line"><span class="type">uint16_t</span> VoltageC = rec_data[<span class="number">13</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">14</span>];</span><br><span class="line">ana_s.Ia = ElectricityA;</span><br><span class="line">ana_s.Ib = ElectricityB;</span><br><span class="line">ana_s.Ic = ElectricityC;</span><br><span class="line">ana_s.Va = VoltageA;</span><br><span class="line">ana_s.Vb = VoltageB;</span><br><span class="line">ana_s.Vc = VoltageC;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;DianliuDianyaBan:\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Length: %d\n&quot;</span>, DataLength_Short);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ElectricityA: %.1f\n&quot;</span>, ElectricityA);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ElectricityB: %.1f\n&quot;</span>, ElectricityB);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ElectricityC: %.1f\n&quot;</span>, ElectricityC);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;VoltageA: %d\n&quot;</span>, VoltageA);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;VoltageB: %d\n&quot;</span>, VoltageB);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;VoltageC: %d\n&quot;</span>, VoltageC);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ana_s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//QuannengBan</span></span><br><span class="line">analysis_l_part <span class="title function_">analysis_l</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *rec_data)</span>&#123;</span><br><span class="line">analysis_l_part ana_l;</span><br><span class="line"><span class="type">uint8_t</span> DataLength_Long = rec_data[<span class="number">2</span>];</span><br><span class="line"><span class="type">float</span> ProElectricityA1 =(rec_data[<span class="number">3</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">4</span>]);</span><br><span class="line"><span class="type">float</span> ProElectricityA = ProElectricityA1/<span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> ProElectricityB1 =(rec_data[<span class="number">5</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">6</span>]);</span><br><span class="line"><span class="type">float</span> ProElectricityB = ProElectricityB1/<span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> ProElectricityC1 =(rec_data[<span class="number">7</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">8</span>]);</span><br><span class="line"><span class="type">float</span> ProElectricityC = ProElectricityC1/<span class="number">10</span>;</span><br><span class="line"><span class="type">uint16_t</span> ProVoltageA = rec_data[<span class="number">9</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">10</span>];</span><br><span class="line"><span class="type">uint16_t</span> ProVoltageB = rec_data[<span class="number">11</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">12</span>];</span><br><span class="line"><span class="type">uint16_t</span> ProVoltageC = rec_data[<span class="number">13</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">14</span>];</span><br><span class="line"><span class="type">uint16_t</span> ActivePowerA_h = rec_data[<span class="number">15</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">16</span>];</span><br><span class="line"><span class="type">int</span> ActivePowerA;</span><br><span class="line"><span class="keyword">if</span>(ActivePowerA_h &gt;&gt; <span class="number">12</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">ActivePowerA_h = ~ActivePowerA_h + <span class="number">1</span>;</span><br><span class="line">ActivePowerA = -ActivePowerA_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ActivePowerA = ActivePowerA_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint16_t</span> ActivePowerB_h = rec_data[<span class="number">17</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">18</span>];</span><br><span class="line"><span class="type">int</span> ActivePowerB;</span><br><span class="line"><span class="keyword">if</span>(ActivePowerB_h &gt;&gt; <span class="number">12</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">ActivePowerB_h = ~ActivePowerB_h + <span class="number">1</span>;</span><br><span class="line">ActivePowerB = -ActivePowerB_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ActivePowerB = ActivePowerB_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint16_t</span> ActivePowerC_h = rec_data[<span class="number">19</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> ActivePowerC;</span><br><span class="line"><span class="keyword">if</span>(ActivePowerC_h &gt;&gt; <span class="number">12</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">ActivePowerC_h = ~ActivePowerC_h + <span class="number">1</span>;</span><br><span class="line">ActivePowerC = -ActivePowerC_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ActivePowerC = ActivePowerC_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint32_t</span> TotalActivePower_h = rec_data[<span class="number">21</span>] &lt;&lt;<span class="number">24</span> | rec_data[<span class="number">22</span>] &lt;&lt;<span class="number">16</span> | rec_data[<span class="number">23</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">24</span>];</span><br><span class="line"><span class="type">int</span> TotalActivePower;</span><br><span class="line"><span class="keyword">if</span>(TotalActivePower_h &gt;&gt; <span class="number">28</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">TotalActivePower_h = ~TotalActivePower_h + <span class="number">1</span>;</span><br><span class="line">TotalActivePower = -TotalActivePower_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">TotalActivePower = TotalActivePower_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint16_t</span> ReactivePowerA_h = rec_data[<span class="number">25</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">26</span>];</span><br><span class="line"><span class="type">int</span> ReactivePowerA;</span><br><span class="line"><span class="keyword">if</span>(ReactivePowerA_h &gt;&gt; <span class="number">12</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">ReactivePowerA_h = ~ReactivePowerA_h + <span class="number">1</span>;</span><br><span class="line">ReactivePowerA = -ReactivePowerA_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ReactivePowerA = ReactivePowerA_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint16_t</span> ReactivePowerB_h = rec_data[<span class="number">27</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">28</span>];</span><br><span class="line"><span class="type">int</span> ReactivePowerB;</span><br><span class="line"><span class="keyword">if</span>(ReactivePowerB_h &gt;&gt; <span class="number">12</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">ReactivePowerB_h = ~ReactivePowerB_h + <span class="number">1</span>;</span><br><span class="line">ReactivePowerB = -ReactivePowerB_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ReactivePowerB = ReactivePowerB_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint16_t</span> ReactivePowerC_h = rec_data[<span class="number">29</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">30</span>];</span><br><span class="line"><span class="type">int</span> ReactivePowerC;</span><br><span class="line"><span class="keyword">if</span>(ReactivePowerC_h &gt;&gt; <span class="number">12</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">ReactivePowerC_h = ~ReactivePowerC_h + <span class="number">1</span>;</span><br><span class="line">ReactivePowerC = -ReactivePowerC_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ReactivePowerC = ReactivePowerC_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint32_t</span> TotalReactivePower_h = rec_data[<span class="number">31</span>] &lt;&lt; <span class="number">24</span> | rec_data[<span class="number">32</span>] &lt;&lt;<span class="number">16</span> | rec_data[<span class="number">33</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">34</span>];</span><br><span class="line"><span class="type">int</span> TotalReactivePower;</span><br><span class="line"><span class="keyword">if</span>(TotalReactivePower_h &gt;&gt; <span class="number">28</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">TotalReactivePower_h = ~TotalReactivePower_h + <span class="number">1</span>;</span><br><span class="line">TotalReactivePower = -TotalReactivePower_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">TotalReactivePower = TotalReactivePower_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint16_t</span> ApparentPowerA_h = rec_data[<span class="number">35</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">36</span>];</span><br><span class="line"><span class="type">int</span> ApparentPowerA;</span><br><span class="line"><span class="keyword">if</span>(ApparentPowerA_h &gt;&gt; <span class="number">12</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">ApparentPowerA_h = ~ApparentPowerA_h + <span class="number">1</span>;</span><br><span class="line">ApparentPowerA = -ApparentPowerA_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ApparentPowerA = ApparentPowerA_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint16_t</span> ApparentPowerB_h = rec_data[<span class="number">37</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">38</span>];</span><br><span class="line"><span class="type">int</span> ApparentPowerB;</span><br><span class="line"><span class="keyword">if</span>(ApparentPowerB_h &gt;&gt; <span class="number">12</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">ApparentPowerB_h = ~ApparentPowerB_h + <span class="number">1</span>;</span><br><span class="line">ApparentPowerB = -ApparentPowerB_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ApparentPowerB = ApparentPowerB_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint16_t</span> ApparentPowerC_h = rec_data[<span class="number">39</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">40</span>];</span><br><span class="line"><span class="type">int</span> ApparentPowerC;</span><br><span class="line"><span class="keyword">if</span>(ApparentPowerC_h &gt;&gt; <span class="number">12</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">ApparentPowerC_h = ~ApparentPowerC_h + <span class="number">1</span>;</span><br><span class="line">ApparentPowerC = -ApparentPowerC_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ApparentPowerC = ApparentPowerC_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint32_t</span> TotalApparentPower_h = rec_data[<span class="number">41</span>] &lt;&lt; <span class="number">24</span> | rec_data[<span class="number">42</span>] &lt;&lt; <span class="number">16</span>| rec_data[<span class="number">43</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">44</span>];</span><br><span class="line"><span class="type">int</span> TotalApparentPower;</span><br><span class="line"><span class="keyword">if</span>(TotalApparentPower_h &gt;&gt; <span class="number">28</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">TotalApparentPower_h = ~TotalApparentPower_h + <span class="number">1</span>;</span><br><span class="line">TotalApparentPower = -TotalApparentPower_h;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">TotalApparentPower = TotalApparentPower_h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">float</span> PowerFactorA1_h =(rec_data[<span class="number">45</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">46</span>]);</span><br><span class="line"><span class="type">float</span> PowerFactorA = PowerFactorA1_h/<span class="number">100</span>;</span><br><span class="line"><span class="type">float</span> PowerFactorB1 =(rec_data[<span class="number">47</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">48</span>]);</span><br><span class="line"><span class="type">float</span> PowerFactorB = PowerFactorB1/<span class="number">100</span>;</span><br><span class="line"><span class="type">float</span> PowerFactorC1 =(rec_data[<span class="number">49</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">50</span>]);</span><br><span class="line"><span class="type">float</span> PowerFactorC = PowerFactorC1/<span class="number">100</span>;</span><br><span class="line"><span class="type">float</span> TotalPowerFactor;</span><br><span class="line"><span class="type">uint8_t</span> TotalPowerFactor_h = rec_data[<span class="number">52</span>];</span><br><span class="line"><span class="keyword">if</span>(TotalPowerFactor_h &gt;&gt; <span class="number">4</span> &gt;= <span class="number">0x8</span>)&#123;</span><br><span class="line">TotalPowerFactor_h =~TotalPowerFactor_h + <span class="number">1</span>;</span><br><span class="line">TotalPowerFactor = -(<span class="type">float</span>)TotalPowerFactor_h / <span class="number">100</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">float</span> TotalPowerFactor1 = rec_data[<span class="number">52</span>];</span><br><span class="line">TotalPowerFactor = (<span class="type">float</span>)TotalPowerFactor_h  / <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">float</span> APhaseElectricity1 = rec_data[<span class="number">54</span>] &lt;&lt; <span class="number">24</span> | rec_data[<span class="number">54</span>] &lt;&lt; <span class="number">16</span>| rec_data[<span class="number">55</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">56</span>];</span><br><span class="line"><span class="type">float</span> APhaseElectricity = APhaseElectricity1/<span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> BPhaseElectricity1 = rec_data[<span class="number">57</span>] &lt;&lt; <span class="number">24</span> | rec_data[<span class="number">58</span>] &lt;&lt; <span class="number">16</span>| rec_data[<span class="number">59</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">60</span>];</span><br><span class="line"><span class="type">float</span> BPhaseElectricity = BPhaseElectricity1/<span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> CPhaseElectricity1 = rec_data[<span class="number">61</span>] &lt;&lt; <span class="number">24</span> | rec_data[<span class="number">62</span>] &lt;&lt; <span class="number">16</span>| rec_data[<span class="number">63</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">64</span>];</span><br><span class="line"><span class="type">float</span> CPhaseElectricity = CPhaseElectricity1/<span class="number">10</span>;</span><br><span class="line"><span class="type">uint32_t</span> TotalElectricity1_h = rec_data[<span class="number">65</span>] &lt;&lt; <span class="number">16</span>;</span><br><span class="line"><span class="type">uint32_t</span> TotalElectricity2_h = TotalElectricity1_h &lt;&lt; <span class="number">8</span>;</span><br><span class="line"><span class="type">float</span> TotalElectricity1 = rec_data[<span class="number">65</span>] &lt;&lt; <span class="number">24</span> | rec_data[<span class="number">66</span>] &lt;&lt; <span class="number">16</span>| rec_data[<span class="number">67</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">68</span>];</span><br><span class="line"><span class="type">float</span> TotalElectricity = TotalElectricity1/<span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> Frequency1 =(rec_data[<span class="number">79</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">80</span>]);</span><br><span class="line"><span class="type">float</span> Frequency = Frequency1/<span class="number">10</span>;</span><br><span class="line"><span class="type">float</span> Temperature1 =(rec_data[<span class="number">81</span>] &lt;&lt; <span class="number">8</span> | rec_data[<span class="number">82</span>]);</span><br><span class="line"><span class="type">float</span> Temperature = Temperature1/<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">ana_l.Ia = ProElectricityA;</span><br><span class="line">ana_l.Ib = ProElectricityB;</span><br><span class="line">ana_l.Ic = ProElectricityC;</span><br><span class="line">ana_l.Va = ProVoltageA;</span><br><span class="line">ana_l.Vb = ProVoltageB;</span><br><span class="line">ana_l.Vc = ProVoltageC;</span><br><span class="line">ana_l.Ca = APhaseElectricity;</span><br><span class="line">ana_l.Cb = BPhaseElectricity;</span><br><span class="line">ana_l.Cc = CPhaseElectricity;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;QuannengBan:\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Length: %d\n&quot;</span>, DataLength_Long);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ElectricityA: %.1f\n&quot;</span>, ProElectricityA);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ElectricityB: %.1f\n&quot;</span>, ProElectricityB);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ElectricityC: %.1f\n&quot;</span>, ProElectricityC);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;VoltageA: %d\n&quot;</span>, ProVoltageA);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;VoltageB: %d\n&quot;</span>, ProVoltageB);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;VoltageC: %d\n&quot;</span>, ProVoltageC);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Active Power A: %d\n&quot;</span>, ActivePowerA);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Active Power B: %d\n&quot;</span>, ActivePowerB);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Active Power C: %d\n&quot;</span>, ActivePowerC);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Total Active Power: %d\n&quot;</span>, TotalActivePower);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Reactive Power A: %d\n&quot;</span>, ReactivePowerA);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Reactive Power B: %d\n&quot;</span>, ReactivePowerB);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Reactive Power C: %d\n&quot;</span>, ReactivePowerC);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Total Reactive Power: %d\n&quot;</span>, TotalReactivePower);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Apparent Power A: %d\n&quot;</span>, ApparentPowerA);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Apparent Power B: %d\n&quot;</span>, ApparentPowerB);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Apparent Power C: %d\n&quot;</span>, ApparentPowerC);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Total Apparent Power: %d\n&quot;</span>, TotalApparentPower);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Power Factor A: %.2f\n&quot;</span>, PowerFactorA);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Power Factor B: %.2f\n&quot;</span>, PowerFactorB);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Power Factor C: %.2f\n&quot;</span>, PowerFactorC);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Total Power Factor: %.2f\n&quot;</span>, TotalPowerFactor);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;A Quantity of electric charge: %.1f\n&quot;</span>, APhaseElectricity);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;B Quantity of electric charge: %.1f\n&quot;</span>, BPhaseElectricity);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;C Quantity of electric charge: %.1f\n&quot;</span>, CPhaseElectricity);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Total Quantity of electric charge: %.1f\n&quot;</span>, TotalElectricity);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Frequency: %.1f\n&quot;</span>, Frequency);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Temperature: %.1f\n&quot;</span>, Temperature);</span><br><span class="line"><span class="keyword">return</span> ana_l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">get_seconds</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line"><span class="type">time_t</span> current_time = time(<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">return</span> current_time;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SendAndRec</span><span class="params">(<span class="type">float</span> IV, <span class="type">uint16_t</span> type, <span class="type">uint16_t</span> number, <span class="type">unsigned</span> <span class="type">char</span>* p, <span class="keyword">struct</span> udp_request request)</span>&#123;</span><br><span class="line">request.content.value = IV;</span><br><span class="line">request.content.sense.type = htons(type);</span><br><span class="line">request.content.sense.number = htons(number);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* v = (<span class="type">char</span>*)&amp;request.command;</span><br><span class="line"><span class="type">uint16_t</span> crc_verify = crc16_modbus(v, <span class="keyword">sizeof</span>(v));</span><br><span class="line">request.verify = htons(crc_verify);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tmp;</span><br><span class="line">p = (<span class="type">char</span>*)&amp;request;</span><br><span class="line">tmp = p[<span class="number">20</span>];</span><br><span class="line">p[<span class="number">20</span>] = p[<span class="number">23</span>];</span><br><span class="line">p[<span class="number">23</span>] = tmp;</span><br><span class="line"></span><br><span class="line">tmp = p[<span class="number">21</span>];</span><br><span class="line">p[<span class="number">21</span>] = p[<span class="number">22</span>];</span><br><span class="line">p[<span class="number">22</span>] = tmp;</span><br><span class="line"><span class="type">int</span> len = <span class="keyword">sizeof</span>(request);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span> ;i&lt;len; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, *p);</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">udp_request</span> <span class="title">request</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">h</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* p = (<span class="type">char</span>*)&amp;request;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span>* v = (<span class="type">char</span>*)&amp;request.command;</span><br><span class="line"><span class="type">uint32_t</span> seconds = get_seconds();</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[<span class="number">1024</span>] ;</span><br><span class="line"><span class="type">char</span> buffer[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> send_data[<span class="number">1024</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">char</span> rec_data[<span class="number">1024</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">char</span> rec_data1[<span class="number">17</span>] = &#123;<span class="number">0x01</span> ,<span class="number">0x03</span> ,<span class="number">0x0C</span> ,<span class="number">0x00</span> ,<span class="number">0x4C</span> ,<span class="number">0x00</span> ,<span class="number">0x4B</span> ,<span class="number">0x00</span> ,<span class="number">0x4B</span> ,<span class="number">0x00</span> ,<span class="number">0xEA</span> ,<span class="number">0x00</span> ,<span class="number">0xEA</span> ,<span class="number">0x00</span> ,<span class="number">0xEA</span> ,<span class="number">0x93</span> ,<span class="number">0x70</span>&#125;;</span><br><span class="line"><span class="type">char</span> rec_data2[<span class="number">85</span>] = &#123;<span class="number">0x01</span> ,<span class="number">0x03</span> ,<span class="number">0x50</span> ,<span class="number">0x00</span> ,<span class="number">0x4C</span> ,<span class="number">0x00</span> ,<span class="number">0x4C</span> ,<span class="number">0x00</span> ,<span class="number">0x4B</span> ,<span class="number">0x00</span> ,<span class="number">0xEA</span> ,<span class="number">0x00</span> ,<span class="number">0xEA</span> ,<span class="number">0x00</span> ,<span class="number">0xEA</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,</span><br><span class="line">  <span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0x06</span> ,<span class="number">0xD3</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span></span><br><span class="line">  ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0xFF</span> ,<span class="number">0x00</span> ,<span class="number">0x77</span> ,<span class="number">0x00</span> ,<span class="number">0x64</span> ,<span class="number">0x00</span> ,<span class="number">0x64</span> ,<span class="number">0x00</span> ,<span class="number">0x8F</span> ,<span class="number">0x00</span> ,<span class="number">0x00</span> ,<span class="number">0x00</span> ,<span class="number">0x02</span> ,<span class="number">0x00</span> ,<span class="number">0x00</span></span><br><span class="line">  ,<span class="number">0x00</span> ,<span class="number">0x02</span> ,<span class="number">0x00</span> ,<span class="number">0x00</span> ,<span class="number">0x00</span> ,<span class="number">0x02</span> ,<span class="number">0x00</span> ,<span class="number">0x00</span> ,<span class="number">0x00</span> ,<span class="number">0x06</span> ,<span class="number">0x00</span> ,<span class="number">0x00</span> ,<span class="number">0x00</span> ,<span class="number">0x01</span> ,<span class="number">0x00</span> ,<span class="number">0x01</span> ,<span class="number">0x00</span> ,<span class="number">0x00</span> ,<span class="number">0x00</span> ,<span class="number">0x01</span> ,<span class="number">0x01</span></span><br><span class="line">  ,<span class="number">0xF4</span> ,<span class="number">0x00</span> ,<span class="number">0xCF</span> ,<span class="number">0x68</span> ,<span class="number">0xCD</span>&#125;;</span><br><span class="line"><span class="type">char</span> *ptr1, *ptr2;</span><br><span class="line"><span class="type">int</span> i, j, len1, len2;</span><br><span class="line"><span class="type">int</span> data_len = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> addr_len = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in);</span><br><span class="line"><span class="type">char</span> hostname[] = <span class="string">&quot;www.baidu.com&quot;</span>;</span><br><span class="line"><span class="type">char</span> ip[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n\n&quot;</span>, p);</span><br><span class="line"><span class="comment">//check ziduan</span></span><br><span class="line">request.forward = <span class="number">0xaa</span>;</span><br><span class="line">request.reserve = <span class="number">0x00</span>;</span><br><span class="line">request.version = htons(<span class="number">0x0101</span>);</span><br><span class="line">request.length = htons(<span class="number">0x000c</span>);</span><br><span class="line">request.command = htons(<span class="number">0x0a01</span>);</span><br><span class="line">request.content.ticks = htonl(seconds);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> crc_verify = crc16_modbus(v, <span class="keyword">sizeof</span>(v));</span><br><span class="line">request.verify = crc_verify;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Forward: 0x%04x\n&quot;</span>, request.forward);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Version: 0x%04x\n&quot;</span>, request.version);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Length: 0x%04x\n&quot;</span>, request.length);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Verify: 0x%04x\n&quot;</span>, crc_verify);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Command: 0x%04x\n&quot;</span>, request.command);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Content-Ticks: 0x%04x\n&quot;</span>,request.content.ticks);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Content-Value:%.2f\n&quot;</span>,request.content.value);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Content-Type: 0x%04x\n&quot;</span>,request.content.sense.type);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Content-Number: 0x%04x\n&quot;</span>,request.content.sense.number);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//dns to ip</span></span><br><span class="line">h = gethostbyname(hostname);</span><br><span class="line"><span class="keyword">if</span>(h ==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;GetIP&quot;</span>);</span><br><span class="line"><span class="comment">//printf(&quot;Get IP error\n&quot;);</span></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strncpy</span>(ip, inet_ntoa(*((<span class="keyword">struct</span> in_addr *)h-&gt;h_addr)),<span class="keyword">sizeof</span>(ip));</span><br><span class="line"><span class="comment">//strncpy(ip, SERVER_IP,sizeof(ip));</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;HostName :%s\n&quot;</span>,h-&gt;h_name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;IP Address1 :%s\n&quot;</span>,inet_ntoa(*((<span class="keyword">struct</span> in_addr *)h-&gt;h_addr)));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;IP Address2 :%s\n&quot;</span>,ip);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//create udp socket </span></span><br><span class="line"><span class="type">int</span> sock = socket(AF_INET,SOCK_DGRAM,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(sock &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;socket creat&quot;</span>);</span><br><span class="line"><span class="comment">//printf(&quot;socket create error\n&quot;);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket:%d\n&quot;</span>,sock);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//set server address</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;server_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">server_addr.sin_family = AF_INET;</span><br><span class="line">server_addr.sin_addr.s_addr = inet_addr(ip);</span><br><span class="line">server_addr.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line"><span class="comment">//send data to udp server</span></span><br><span class="line"><span class="type">int</span> len = <span class="keyword">sizeof</span>(request);</span><br><span class="line">request.content.value = <span class="number">-50</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span> ;i&lt;len; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02x &quot;</span>, *p);</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">p = (char*)&amp;request;</span></span><br><span class="line"><span class="comment">int sendto_len = sendto(sock, p, len, 0, (struct sockaddr *)&amp;server_addr,sizeof(server_addr));</span></span><br><span class="line"><span class="comment">if(sendto_len &lt; 0)&#123;</span></span><br><span class="line"><span class="comment">perror(&quot;sendto&quot;);</span></span><br><span class="line"><span class="comment">return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">printf(&quot;data:%d\n&quot;,sendto_len);</span></span><br><span class="line"><span class="comment">printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//send and receive data</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int iFd  = _uart_open();</span></span><br><span class="line"><span class="comment">if(iFd &lt; 0)&#123;</span></span><br><span class="line"><span class="comment">perror(&quot;open fail&quot;);</span></span><br><span class="line"><span class="comment">return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">printf(&quot;open success,iFd=%d\n&quot;,iFd);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">uint16_t</span> num_sense = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//analysis</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">unsigned char verify_data[8] = &#123;0x01 ,0x03, 0x00, 0x00, 0x00, 0x06, 0xC5, 0xC8&#125;;</span></span><br><span class="line"><span class="comment">int w_result= _uart_write(verify_data, 8);</span></span><br><span class="line"><span class="comment">printf(&quot;write_result is%d\n&quot;,w_result);</span></span><br><span class="line"><span class="comment">printf(&quot;&quot;);</span></span><br><span class="line"><span class="comment">int size_read = _uart_read(buf, sizeof(buf));</span></span><br><span class="line"><span class="comment">int len_read = buf[2];</span></span><br><span class="line"><span class="comment">int size_all = 3 + len_read + 2;</span></span><br><span class="line"><span class="comment">while(size_read &lt; size_all)&#123;</span></span><br><span class="line"><span class="comment">size_read += _uart_read(buf + size_read, sizeof(buf) - size_read);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">printf(&quot;Read data length: %d\n&quot;,size_all);</span></span><br><span class="line"><span class="comment">for(i = 0; i &lt; size_all; i++) &#123;</span></span><br><span class="line"><span class="comment">printf(&quot;%02x &quot;, buf[i]);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">sizeof</span>(rec_data1) &lt; <span class="number">30</span>)&#123;</span><br><span class="line">analysis_s_part ana_s = analysis_s(rec_data1);</span><br><span class="line"><span class="keyword">if</span>(ana_s.Ia != <span class="number">0</span> || ana_s.Va != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(ana_s.Ia != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_s.Ia, <span class="number">0x0204</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_s.Va != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_s.Va, <span class="number">0x0206</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">num_sense ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_s.Ib != <span class="number">0</span> || ana_s.Vb != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(ana_s.Ib != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_s.Ib, <span class="number">0x0204</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_s.Vb != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_s.Vb, <span class="number">0x0206</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">num_sense ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_s.Ic != <span class="number">0</span> || ana_s.Vc != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(ana_s.Ic != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_s.Ic, <span class="number">0x0204</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_s.Vc != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_s.Vc, <span class="number">0x0206</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line">&#125;</span><br><span class="line">num_sense ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">analysis_l_part ana_l = analysis_l(buf);</span><br><span class="line"><span class="keyword">if</span>(ana_l.Ia != <span class="number">0</span> || ana_l.Va != <span class="number">0</span> || ana_l.Ca != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(ana_l.Ia != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_l.Ia, <span class="number">0x0204</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_l.Va != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_l.Va, <span class="number">0x0206</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_l.Ca != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_l.Ca, <span class="number">0x0202</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">num_sense ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_l.Ib != <span class="number">0</span> || ana_l.Vb != <span class="number">0</span> || ana_l.Cb != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(ana_l.Ib != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_l.Ib, <span class="number">0x0204</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_l.Vb != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_l.Vb, <span class="number">0x0206</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_l.Cb != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_l.Cb, <span class="number">0x0202</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">num_sense ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_l.Ic != <span class="number">0</span> || ana_l.Vc != <span class="number">0</span> || ana_l.Cc != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(ana_l.Ic != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_l.Ic, <span class="number">0x0204</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_l.Vc != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_l.Vc, <span class="number">0x0206</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ana_l.Cc != <span class="number">0</span>)&#123;</span><br><span class="line">SendAndRec(ana_l.Cc, <span class="number">0x0202</span>, num_sense, p, request);</span><br><span class="line"><span class="type">int</span> sendto_len = sendto(sock, p, len, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr,<span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"><span class="keyword">if</span>(sendto_len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;data:%d\n&quot;</span>,sendto_len);</span><br><span class="line"><span class="type">int</span> rec_len = recvfrom(sock,rec_data, <span class="built_in">strlen</span>(rec_data),<span class="number">0</span>,(<span class="keyword">struct</span> sockaddr *)&amp;server_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span>(rec_len &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data[%d] failure:%s \n&quot;</span>,rec_len<span class="number">-1</span>,strerror(errno));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Receive data: %s\n&quot;</span>, buf);</span><br><span class="line"><span class="built_in">memset</span>(&amp;rec_data, <span class="number">0</span>, <span class="keyword">sizeof</span>(rec_data));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">num_sense ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//analysis_s_part ana_s = analysis_s(rec_data1);</span></span><br><span class="line"><span class="comment">//analysis_l_part ana_l = analysis_l(rec_data2);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// if (recvfrom(sockfd, recv_buf, sizeof(recv_buf), 0, NULL, NULL) &lt; 0) &#123;</span></span><br><span class="line"></span><br><span class="line">close(sock);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h6><h6 id="sockaddr结构体"><a href="#sockaddr结构体" class="headerlink" title="sockaddr结构体"></a>sockaddr结构体</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> &#123;</span>    </span><br><span class="line"><span class="type">char</span> *h_name; <span class="comment">/* 主机的官方域名 */</span>    </span><br><span class="line"><span class="type">char</span> **h_aliases; <span class="comment">/* 一个以NULL结尾的主机别名数组 */</span>    </span><br><span class="line"><span class="type">int</span> h_addrtype; <span class="comment">/* 返回的地址类型，在Internet环境下为AF-INET */</span>    </span><br><span class="line"><span class="type">int</span> h_length; <span class="comment">/* 地址的字节长度 */</span>    </span><br><span class="line"><span class="type">char</span> **h_addr_list; <span class="comment">/* 一个以0结尾的数组，包含该主机的所有地址*/</span>    </span><br><span class="line">&#125;;    </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> &#123;</span>    </span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> sa_family;    <span class="comment">// address family, AF_xxx    </span></span><br><span class="line"><span class="type">char</span> sa_data[<span class="number">14</span>];    <span class="comment">// 14 bytes of protocol address    </span></span><br><span class="line">&#125;;    </span><br></pre></td></tr></table></figure><h6 id="sockaddr-in结构体"><a href="#sockaddr-in结构体" class="headerlink" title="sockaddr_in结构体"></a><strong>sockaddr_in结构体</strong></h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>   <span class="title">sockaddr_in</span>   &#123;</span>    </span><br><span class="line"><span class="type">short</span> <span class="type">int</span> sin_family;          <span class="comment">// Address family     </span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> <span class="type">int</span> sin_port;   <span class="comment">// Port number     </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span>       <span class="comment">/* Internet address */</span>  </span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> sin_zero[<span class="number">8</span>];     <span class="comment">/* Same size as struct sockaddr */</span>  </span><br><span class="line">&#125;;   </span><br><span class="line"><span class="class"><span class="keyword">struct</span>   <span class="title">in_addr</span>   &#123;</span>    </span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span>  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span> u_char s_b1,s_b2,s_b3,s_b4; &#125; S_un_b;  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span> u_short s_w1,s_w2; &#125; S_un_w;  </span><br><span class="line">u_long S_addr;   </span><br><span class="line">&#125; S_un;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a><strong>库函数</strong></h3><h4 id="标准库函数"><a href="#标准库函数" class="headerlink" title="标准库函数"></a><strong>标准库函数</strong></h4><h6 id="strcpy-strncpy-函数"><a href="#strcpy-strncpy-函数" class="headerlink" title="strcpy()/strncpy()函数"></a><strong>strcpy()/strncpy()函数</strong></h6><p>函数功能：把一个地址上的数据复制到另一个地址上去</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 函数原型</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">strcpy</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src)</span>;</span><br><span class="line"><span class="comment">//用法：把src这个地址的地址的字符串赋值到dest这个地址去</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">strncpy</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src, <span class="type">size_t</span> n)</span>;</span><br><span class="line"><span class="comment">//用法：把src这个地址的地址的n个字符串赋值到dest这个地址去</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 常见的指针与数组间的赋值问题</span></span><br><span class="line"><span class="type">char</span> a[] = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"><span class="type">char</span> b[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *p  = a;<span class="comment">//正确赋值，数组名为数组首元素地址，因此可使用指针保存该地址（指针只能保存地址）</span></span><br><span class="line">&gt;<span class="type">char</span>  c[<span class="number">3</span>]  = a;<span class="comment">//错误---》数组不能直接给数组赋值</span></span><br><span class="line"><span class="type">char</span>  d[<span class="number">3</span>] = p;<span class="comment">//错误---》指针不能直接给数组赋值</span></span><br><span class="line"><span class="built_in">strcpy</span>(b,a);<span class="comment">//正确，使用标准库函数可实现字符串拷贝</span></span><br><span class="line"><span class="type">char</span> **p1 = &amp;p;<span class="comment">//正确，二级指针可接收一级指针的地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>数组不能直接给数组赋值</li><li>指针不能直接给数组赋值</li></ul></blockquote><h6 id="perror函数"><a href="#perror函数" class="headerlink" title="perror函数"></a><strong>perror函数</strong></h6><p>函数功能：这个函数内部会自己获取errno的值，调用这个函数会直接把错误提示字符串打印出来。此外，我们也可以在错误提示字符串前添加一些自己想要打印的信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">perror</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span></span><br></pre></td></tr></table></figure><p>参数：</p><ol><li><p><strong>s</strong>：如果我们想要在错误提示字符串之前添加自己想要的打印信息，就通过此参数传入，如果不需要添加信息，则让其为空字符串即可。</p><h4 id="套接字库函数"><a href="#套接字库函数" class="headerlink" title="套接字库函数"></a><strong>套接字库函数</strong></h4><h6 id="Socket-函数"><a href="#Socket-函数" class="headerlink" title="Socket() 函数"></a><strong>Socket() 函数</strong></h6><p>函数功能：在Linux下用socket()来创建套接字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">socket</span><span class="params">(<span class="type">int</span> af, <span class="type">int</span> type, <span class="type">int</span> protocol)</span></span><br></pre></td></tr></table></figure><p>参数：</p></li><li><p><strong>af：</strong>地址族，也就是ip地址类型，常用的有<strong>AF_INET</strong>和<strong>AF_INET6</strong>。AF是”Address Family”的简写，INET是”Internet”的简写。前者表示IPv4地址，后者表示IPv6地址。</p></li><li><p><strong>type：</strong>数据传输方式/套接字类型，常用的有<strong>SOCK_STREAM（流格式套接字/面向连接的套接字）</strong>和<strong>SOCK_DGRAM（数据报套接字/无连接的套接字）</strong></p></li></ol><ul><li><strong>SOCK_STREAM</strong> 选择 <strong>TCP</strong> – 流式套接字   —&gt;Stream Sockets</li><li><strong>SOCK_DGRAM</strong> 选择 <strong>UDP</strong> – 数据报套接字  —&gt;Datagram Sockets</li></ul><ol start="3"><li><p><strong>protocol：</strong>传输协议，传0表示使用默认协议，常用的有<strong>IPPROTO_TCP</strong>和<strong>IPPTOTO_UDP</strong>，分别表示TCP协议和UDP协议。</p></li><li><p><strong>返回值：</strong>socket返回的值是一个文件描述符，SOCKET类型本身也是定义为int的，0,1,2分别表示标准输入、标准输出、标准错误，所以其他打开的文件描述符都会大于2； 错误时就返回 -1。</p><h6 id="bind-函数"><a href="#bind-函数" class="headerlink" title="bind() 函数"></a><strong>bind() 函数</strong></h6><p>函数功能：绑定主机的IP地址和端口号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span>        </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> PASCAL FAR <span class="title function_">bind</span><span class="params">(SOCKET s, <span class="type">const</span> <span class="keyword">struct</span> sockaddr* addr, <span class="type">socklen_t</span> addrlen)</span>;</span><br></pre></td></tr></table></figure><p>参数：</p></li><li><p><strong>s</strong>：由socket()调用返回的并且未作连接的套接字描述符(套接字号)。</p></li><li><p><strong>addr</strong>：赋给套接字s的本地 IP 地址和端口号</p></li><li><p><strong>socklen_t</strong>：地址的大小长度。</p></li><li><p><strong>返回值</strong>：如果没有错误发生，bind()返回0。否则返回SOCKET_ERROR。</p><h6 id="sendto-函数"><a href="#sendto-函数" class="headerlink" title="sendto() 函数"></a><strong>sendto() 函数</strong></h6><p>函数功能：用于UDP中发送数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">sendto</span><span class="params">(<span class="type">int</span> socket,<span class="type">const</span> <span class="type">void</span>* message,<span class="type">size_t</span> length,<span class="type">const</span> <span class="keyword">struct</span> sockaddr* dest_addr,<span class="type">socklen_t</span> dest_len)</span>;</span><br></pre></td></tr></table></figure><p>参数：</p></li><li><p><strong>socket</strong>：套接字文件描述符</p></li><li><p><strong>message</strong>：你要发送的数据</p></li><li><p><strong>length</strong>：你要发送的数据大小，注意有多少写多少strlen</p></li><li><p><strong>flags</strong>：一般设置成 0</p></li><li><p><strong>dest_addr</strong>:对方的IP地址和端口号</p></li><li><p><strong>dest_len</strong>：结构体的大小</p></li><li><p><strong>返回值</strong>：成功：发送出去的字节</p></li></ol><p>失败：-1 </p><h6 id="recvform-函数"><a href="#recvform-函数" class="headerlink" title="recvform() 函数"></a><strong>recvform() 函数</strong></h6><p>函数功能：用于UDP中接收数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">recvform</span><span class="params">(<span class="type">int</span> socket,<span class="type">void</span>* buffer,<span class="type">size_t</span> length,<span class="type">int</span> flags,<span class="keyword">struct</span> sockaddr* dest_addr,<span class="type">socklen_t</span>* address_len)</span>;</span><br></pre></td></tr></table></figure><p>参数：</p><ol><li><p><strong>socket</strong>：套接字文件描述符</p></li><li><p><strong>buffer</strong>：接受的数据存储在这里</p></li><li><p><strong>length</strong>：接受的数据的大小，以最大的来接受（sizeof）</p></li><li><p><strong>flags</strong>:一般设置成0</p></li><li><p><strong>address</strong>：存储客户端的IP地址和端口号，可以获取到是谁给你发送的</p></li><li><p><strong>address_len</strong>：结构体的大小</p></li><li><p><strong>返回值</strong>：成功：接收到的字节数</p><pre><code>            失败：-1</code></pre></li></ol><h6 id="htons-ntons-函数"><a href="#htons-ntons-函数" class="headerlink" title="htons\ntons() 函数"></a><strong>htons\ntons() 函数</strong></h6><p>函数功能：端口转换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">htons</span><span class="params">(<span class="type">uint16_t</span> hostshort)</span>;   <span class="comment">//将主机端口号转成网络端口号</span></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">ntohs</span><span class="params">(<span class="type">uint16_t</span> netshort)</span>;    <span class="comment">//将网络端口号转成主机端口号</span></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">htonl</span><span class="params">(<span class="type">uint32_t</span> hostint32)</span>;   <span class="comment">//将32位主机字节序数据转换成网络字节序数据</span></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">ntohl</span><span class="params">(<span class="type">uint32_t</span> netint32)</span>;  <span class="comment">//将32位网络字节序数据转换成主机字节序数据</span></span><br></pre></td></tr></table></figure><p>参数：</p><ol><li><p><strong>返回值</strong>：成功：要转换的字节序</p><pre><code>   失败：-1</code></pre><h6 id="inet-addr-ntoa-函数"><a href="#inet-addr-ntoa-函数" class="headerlink" title="inet_addr\ntoa() 函数"></a><strong>inet_addr\ntoa() 函数</strong></h6><p>函数功能：</p></li><li><p>将字符串形式的IP “192.168.102.169”转换为IPV4的32位无符号整型数的IP</p></li><li><p>将无符号整型数的ip，从主机端序转为网络端序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">in_addr_t</span> <span class="title function_">inet_addr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *cp)</span>;    <span class="comment">//将主机IP转成网络IP</span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">inet_ntoa</span><span class="params">(<span class="keyword">struct</span> in_addr in)</span>;    <span class="comment">//将网络IP转成主机IP</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a><strong>常见问题</strong></h2><blockquote><ol><li>当定义并调用 analysis_s(char *rec_data, float Ia, float Ib, float Ic, uint16_t Va, uint16_t Vb, uint16_t Vc) 时，各个返回值为0</li></ol><p><strong>解决方法</strong>：<br>将函数定义改为analysis_s(char *rec_data, float *Ia, float *Ib, float *Ic, uint16_t *Va, uint16_t *Vb, uint16_t *Vc)<br>将调用改为analysis_s(rec_data1,&amp;Ia_s, &amp;Ib_s, &amp;Ic_s, &amp;Va_s, &amp;Vb_s, &amp;Vc_s)<br>2. 在结构体当中，数值部分与实际数值相反，并且无法使用字节序转换函数进行转换，7.6对应的十六进制数应为40 F3 33 33，而结构体中正好相反。</p><p><strong>解决方法</strong>：<br>首先，因为该部分 value 数值在结构体中定义为 float 类型，所以无法直接在赋值时使用字节序转换函数。因此，需要直接在获取的结构体当中，通过数组互换的方式，来改变4个字节的值。</p><ol start="3"><li><br /></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用指令</title>
      <link href="/2023/04/27/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2023/04/27/git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><a name="VNho9"></a></p><h2 id="1-第一次初始化"><a href="#1-第一次初始化" class="headerlink" title="1. 第一次初始化"></a><strong>1. 第一次初始化</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m ‘first commit’</span><br><span class="line">git remote add origin git@github.com:帐号名/仓库名.git</span><br><span class="line">git pull origin master</span><br><span class="line">git push origin master # -f 强推</span><br><span class="line">git clone git@github.com:git帐号名/仓库名.git</span><br></pre></td></tr></table></figure><p><a name="ECNXj"></a></p><h2 id="2-工作基本操作"><a href="#2-工作基本操作" class="headerlink" title="2. 工作基本操作"></a><strong>2. 工作基本操作</strong></h2><ul><li>git checkout master 切到主分支</li><li>git fetch origin 获取最新变更</li><li>git checkout -b dev origin/master 基于主分支创建dev分支</li><li>git add . 添加到缓存</li><li>git commit -m ‘xxx’ 提交到本地仓库</li><li>git fetch origin 获取最新变更<br><a name="CTb01"></a><h2 id="3-初始化仓库"><a href="#3-初始化仓库" class="headerlink" title="3. 初始化仓库"></a><strong>3. 初始化仓库</strong></h2>git init<br><a name="qP5GF"></a><h2 id="4-查看仓库当前状态"><a href="#4-查看仓库当前状态" class="headerlink" title="4. 查看仓库当前状态"></a><strong>4. 查看仓库当前状态</strong></h2>git status<br><a name="vjYhx"></a><h2 id="5-文件相关操作"><a href="#5-文件相关操作" class="headerlink" title="5. 文件相关操作"></a><strong>5. 文件相关操作</strong></h2></li></ul><p><strong>将文件添加到仓库</strong>：</p><ul><li>git add 文件名 将工作区的某个文件添加到暂存区</li><li>git add . 将当前工作区的所有文件都加入暂存区</li><li>git add -u 添加所有被tracked文件中被修改或删除的文件信息到暂存区，不处理untracked的文件</li><li>git add -A 添加所有被tracked文件中被修改或删除的文件信息到暂存区，包括untracked的文件</li><li>git add -i 进入交互界面模式，按需添加文件到缓存区</li></ul><p><strong>将暂存区文件提交到本地仓库</strong>：</p><ul><li>git commit -m “提交说明” 将暂存区内容提交到本地仓库</li><li>git commit -a -m “提交说明” 跳过缓存区操作，直接把工作区内容提交到本地仓库</li></ul><p><strong>比较文件异同</strong></p><ul><li>git diff 工作区与暂存区的差异</li><li>git diff 分支名 工作区与某分支的差异，远程分支这样写：remotes/origin/分支名</li><li>git diff HEAD 工作区与HEAD指针指向的内容差异</li><li>git diff 提交id 文件路径 工作区某文件当前版本与历史版本的差异</li><li>git diff –stage 工作区文件与上次提交的差异(1.6 版本前用 –cached)</li><li>git diff 版本TAG 查看从某个版本后都改动内容</li><li>git diff 分支A 分支B 比较从分支A和分支B的差异(也支持比较两个TAG)</li><li>git diff 分支A…分支B 比较两分支在分开后各自的改动</li></ul><p>另外：如果只想统计哪些文件被改动，多少行被改动，可以添加 –stat 参数<br><a name="kk3t5"></a></p><h2 id="6-查看历史记录"><a href="#6-查看历史记录" class="headerlink" title="6. 查看历史记录"></a><strong>6. 查看历史记录</strong></h2><ul><li><p>git log 查看所有commit记录(SHA-A校验和，作者名称，邮箱，提交时间，提交说明)</p></li><li><p>git log -p -次数 查看最近多少次的提交记录</p></li><li><p>git log –stat 简略显示每次提交的内容更改</p></li><li><p>git log –name-only 仅显示已修改的文件清单</p></li><li><p>git log –name-status 显示新增，修改，删除的文件清单</p></li><li><p>git log –oneline 让提交记录以精简的一行输出</p></li><li><p>git log –graph –all –online 图形展示分支的合并历史</p></li><li><p>git log –author=作者 查询作者的提交记录(和grep同时使用要加一个–all–match参数)</p></li><li><p>git log –grep=过滤信息 列出提交信息中包含过滤信息的提交记录</p></li><li><p>git log -S查询内容 和–grep类似，S和查询内容间没有空格</p></li><li><p>git log fileName 查看某文件的修改记录<br><a name="HP4F0"></a></p><h2 id="7-代码回滚"><a href="#7-代码回滚" class="headerlink" title="7. 代码回滚"></a><strong>7. 代码回滚</strong></h2></li><li><p>git reset HEAD^ 恢复成上次提交的版本</p></li><li><p>git reset HEAD^^ 恢复成上上次提交的版本，就是多个^，以此类推或用~次数</p></li><li><p>git reflog</p></li><li><p>git reset –hard 版本号</p></li><li><p>–soft：只是改变HEAD指针指向，缓存区和工作区不变；</p></li><li><p>–mixed：修改HEAD指针指向，暂存区内容丢失，工作区不变；</p></li><li><p>–hard：修改HEAD指针指向，暂存区内容丢失，工作区恢复以前状态；<br><a name="bkWs7"></a></p><h2 id="8-版本库相关操作"><a href="#8-版本库相关操作" class="headerlink" title="8. 版本库相关操作"></a><strong>8. 版本库相关操作</strong></h2></li><li><p>删除版本库文件：git rm 文件名</p></li><li><p>版本库里的版本替换工作区的版本：git checkout — test.txt<br><a name="dTkSk"></a></p><h2 id="9-远程仓库相关操作"><a href="#9-远程仓库相关操作" class="headerlink" title="9. 远程仓库相关操作"></a><strong>9. 远程仓库相关操作</strong></h2></li></ul><p><strong>同步远程仓库</strong>：git push -u origin master<br /><strong>本地仓库内容推送到远程仓库</strong>：git remote add origin <a href="mailto:&#x67;&#105;&#x74;&#64;&#x67;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#x63;&#111;&#x6d;">&#x67;&#105;&#x74;&#64;&#x67;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#x63;&#111;&#x6d;</a>:帐号名/仓库名.git<br /><strong>从远程仓库克隆项目到本地</strong>：git clone <a href="mailto:&#103;&#105;&#116;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#109;">&#103;&#105;&#116;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#109;</a>:git帐号名/仓库名.git<br /><strong>查看远程库信息</strong>：git remote<br /><strong>拉取远程分支到本地仓库</strong>：</p><ul><li>git checkout -b 本地分支 远程分支 # 会在本地新建分支，并自动切换到该分支</li><li>git fetch origin 远程分支:本地分支 # 会在本地新建分支，但不会自动切换，还需checkout</li><li>git branch –set-upstream 本地分支 远程分支 # 建立本地分支与远程分支的链接</li></ul><p><strong>同步远程仓库更新</strong>：：git fetch origin master<br><a name="VToY9"></a></p><h2 id="10-分支相关操作"><a href="#10-分支相关操作" class="headerlink" title="10. 分支相关操作"></a><strong>10. 分支相关操作</strong></h2><p><strong>创建分支</strong>：git checkout -b dev -b表示创建并切换分支<br />上面一条命令相当于一面的二条：<br />git branch dev 创建分支<br />git checkout dev 切换分支<br /><strong>查看分支</strong>：git branch<br /><strong>合并分支</strong>：</p><ul><li>git merge dev #用于合并指定分支到当前分支</li><li>git merge –no-ff -m “merge with no-ff” dev #加上–no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并</li></ul><p><strong>删除分支</strong>：git branch -d dev<br /><strong>查看分支合并图</strong>：git log –graph –pretty=oneline –abbrev-commit<br /><strong>修改分支名</strong>：<br />方法一：使用git命令操作修改本地分支名称<br />git branch -m oldBranchName newBranchName<br />方法二：使用git命令操作修改远程分支名称</p><ol><li>将本地分支的远程分支删除</li></ol><p>git push origin :oldBranchName</p><ol start="2"><li>将改名后的本地分支推送到远程，并将本地分支与之关联</li></ol><p>git push –set-upstream origin newBranchName<br><a name="UpoSg"></a></p><h2 id="11-git相关配置"><a href="#11-git相关配置" class="headerlink" title="11. git相关配置"></a>11. git相关配置</h2><p>安装完Git后第一件要做的事，设置用户信息(global可换成local在单独项目生效)：</p><ul><li><p>git config –global user.name “用户名” # 设置用户名</p></li><li><p>git config –global user.email “用户邮箱” #设置邮箱</p></li><li><p>git config –global user.name # 查看用户名是否配置成功</p></li><li><p>git config –global user.email # 查看邮箱是否配置<br><a name="LKpqM"></a></p><h2 id="12-其他查看配置相关"><a href="#12-其他查看配置相关" class="headerlink" title="12. 其他查看配置相关"></a>12. 其他查看配置相关</h2></li><li><p>git config –global –list # 查看全局设置相关参数列表</p></li><li><p>git config –local –list # 查看本地设置相关参数列表</p></li><li><p>git config –system –list # 查看系统配置参数列表</p></li><li><p>git config –list # 查看所有Git的配置(全局+本地+系统)</p></li><li><p>git config –global color.ui true //显示git相关颜色<br><a name="TcySi"></a></p><h2 id="13-撤消某次提交"><a href="#13-撤消某次提交" class="headerlink" title="13. 撤消某次提交"></a>13. 撤消某次提交</h2></li><li><p>git revert HEAD # 撤销最近的一个提交</p></li><li><p>git revert 版本号 # 撤销某次commit<br><a name="doKcc"></a></p><h2 id="14-标签"><a href="#14-标签" class="headerlink" title="14. 标签"></a>14. 标签</h2></li><li><p>git tag 标签 //打标签命令，默认为HEAD</p></li><li><p>git tag //显示所有标签</p></li><li><p>git tag 标签 版本号 //给某个commit版本添加标签</p></li><li><p>git show 标签 //显示某个标签的详细信息<br><a name="NliGY"></a></p><h2 id="15-git-删除已提交多余文件"><a href="#15-git-删除已提交多余文件" class="headerlink" title="15.git 删除已提交多余文件"></a>15.git 删除已提交多余文件</h2></li></ul><ol><li>拉取远程仓到本地</li></ol><p>git clone ××<br />cd ×××</p><ol start="2"><li>查看分支</li></ol><p>git branch -a</p><ol start="3"><li>切换到想要操作的分支</li></ol><p>git checkout 想要操作的分支</p><ol start="4"><li>在本地仓库删除文件夹</li></ol><p>git rm -r 我的文件夹/</p><ol start="5"><li>提交代码</li></ol><p>git commit -m”我的修改”</p><ol start="6"><li>推送到远程仓库</li></ol><p>git push origin 想要操作的分支</p>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用指令</title>
      <link href="/2023/04/27/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2023/04/27/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><a name="uFHUL"></a></p><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a><strong>常用指令</strong></h2><p><a name="VJZCS"></a></p><h4 id="复制到外部程序"><a href="#复制到外部程序" class="headerlink" title="复制到外部程序"></a><strong>复制到外部程序</strong></h4><ul><li><p>按住Shift键，使用鼠标选择需要复制的内容<br><a name="h8Jgy"></a></p><h4 id="查看系统和库函数"><a href="#查看系统和库函数" class="headerlink" title="查看系统和库函数"></a><strong>查看系统和库函数</strong></h4></li><li><p><strong>man 1 xx</strong>：shell 命令。</p></li></ul><p>如：ls、vim，查询方法： man ls 或 man 1 ls</p><ul><li><strong>man 2 xx</strong>: 系统调用。</li></ul><p>如 man 2 read</p><ul><li><strong>man 3 xx</strong>: 库函数。</li></ul><p>如：man 3 fopen或 man fopen<br><a name="e9cEm"></a></p><h4 id="查看当前目录"><a href="#查看当前目录" class="headerlink" title="查看当前目录"></a><strong>查看当前目录</strong></h4><ul><li><p><strong>pwd</strong><br><a name="ISBtQ"></a></p><h4 id="查看当前目录下的文件"><a href="#查看当前目录下的文件" class="headerlink" title="查看当前目录下的文件"></a><strong>查看当前目录下的文件</strong></h4></li><li><p><strong>ls -l</strong>        用于列出详细信息</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35559460/1682298902459-99968cd9-5d3c-422b-afe1-966382358023.png#averageHue=%23392521&clientId=uf203ca3d-95e4-4&from=paste&height=69&id=BEEBc&originHeight=69&originWidth=458&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5308&status=done&style=none&taskId=ufee11300-e87e-4cc8-825f-dc0c6dbaffc&title=&width=458" alt="1682298888694.png"><br />权限   硬链接   所有者  所属的组   字节数  修改时间  文件名</p><ul><li><strong>ls -lh</strong>    单位是KB，而 -l 单位是B</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35559460/1682299677357-fbd123f5-c0d1-4280-8f32-141ff60cd286.png#averageHue=%232e2b28&clientId=uf203ca3d-95e4-4&from=paste&height=61&id=PIOMj&originHeight=61&originWidth=441&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6339&status=done&style=none&taskId=u88e4ea6e-09e8-4dc9-a14b-bba8d10106d&title=&width=441" alt="1682299667813.png"></p><ul><li>**ls -i **        查看inode</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35559460/1682299818276-47ecb4fe-dc4e-4bf4-a9d6-4386732b2bd6.png#averageHue=%232c2927&clientId=uf203ca3d-95e4-4&from=paste&height=75&id=lSjH1&originHeight=75&originWidth=413&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6772&status=done&style=none&taskId=ude38ffea-d0db-4ec3-ab07-51ed8446a77&title=&width=413" alt="1682299795949.png"></p><ul><li><strong>ls -la</strong>     查看所有的隐藏文件</li><li><strong>ls -lat</strong>     以时间顺序显示</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35559460/1682300094439-b31f21cb-dfd5-465c-b09a-a391de87fe1a.png#averageHue=%232d2a28&clientId=uf203ca3d-95e4-4&from=paste&height=364&id=Ifeab&originHeight=364&originWidth=503&originalType=binary&ratio=1&rotation=0&showTitle=false&size=39225&status=done&style=none&taskId=u5856532b-4bc6-47cd-809f-954e3a6c55f&title=&width=503" alt="1682300085627.png"></p><ul><li><strong>ls -ld</strong>    只列出目录本身的信息</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35559460/1682300174798-de8fb0d7-49ce-46af-b384-aa22442f3c33.png#averageHue=%232b2725&clientId=uf203ca3d-95e4-4&from=paste&height=34&id=k0lhV&originHeight=34&originWidth=365&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3476&status=done&style=none&taskId=u6b5c8d1e-d343-40fe-80f4-0c92730362c&title=&width=365" alt="1682300166136.png"></p><p><a name="dagWI"></a></p><h4 id="寻找”｛”对应的右括号”｝”"><a href="#寻找”｛”对应的右括号”｝”" class="headerlink" title="寻找”｛”对应的右括号”｝”"></a><strong>寻找”｛”对应的右括号”｝”</strong></h4><p>按 <strong>%</strong> 即可定位<br><a name="GPC84"></a></p><h2 id="运行C语言程序"><a href="#运行C语言程序" class="headerlink" title="运行C语言程序"></a><strong>运行C语言程序</strong></h2><p><a name="CfCrE"></a></p><h4 id="1-创建一个文件并命名"><a href="#1-创建一个文件并命名" class="headerlink" title="1. 创建一个文件并命名"></a>1. 创建一个文件并命名</h4><ul><li><p><strong>touch main.c</strong><br><a name="s9m7X"></a></p><h4 id="2-用vim工具打开这个文件并编写代码-以下任意代码皆可"><a href="#2-用vim工具打开这个文件并编写代码-以下任意代码皆可" class="headerlink" title="2. 用vim工具打开这个文件并编写代码,以下任意代码皆可"></a>2. 用vim工具打开这个文件并编写代码,以下任意代码皆可</h4></li><li><p><strong>vim main.c</strong></p></li><li><p><strong>vi main.c</strong><br><a name="FSxrH"></a></p><h4 id="3-编写完代码后，开始使用Linux自带的C语言编译器-gcc-编译"><a href="#3-编写完代码后，开始使用Linux自带的C语言编译器-gcc-编译" class="headerlink" title="3. 编写完代码后，开始使用Linux自带的C语言编译器(gcc)编译"></a>3. 编写完代码后，开始使用Linux自带的C语言编译器(gcc)编译</h4></li><li><p><strong>gcc main.c</strong><br><a name="jDItm"></a></p><h4 id="4-编译后，会默认生成-a-out-文件，如果不想以-a-out-命名，输入以下指令，可生成一个-test-out-文件"><a href="#4-编译后，会默认生成-a-out-文件，如果不想以-a-out-命名，输入以下指令，可生成一个-test-out-文件" class="headerlink" title="4. 编译后，会默认生成 a.out 文件，如果不想以 a.out 命名，输入以下指令，可生成一个 test.out 文件"></a>4. 编译后，会默认生成 a.out 文件，如果不想以 a.out 命名，输入以下指令，可生成一个 test.out 文件</h4></li><li><p><strong>gcc main.c -o test.out</strong><br><a name="SF3rY"></a></p><h4 id="5-通过指令查看目录下是否生成相应文件"><a href="#5-通过指令查看目录下是否生成相应文件" class="headerlink" title="5. 通过指令查看目录下是否生成相应文件"></a>5. 通过指令查看目录下是否生成相应文件</h4></li><li><p><strong>ls -l</strong>        用于列出详细信息<br><a name="LRN83"></a></p><h4 id="6-运行-main-out-文件-输出结果"><a href="#6-运行-main-out-文件-输出结果" class="headerlink" title="6. 运行 main.out 文件,输出结果"></a>6. 运行 main.out 文件,输出结果</h4></li><li><p>**./main.out **</p></li></ul><p><a name="tImrT"></a></p><h2 id="修改文件名"><a href="#修改文件名" class="headerlink" title="修改文件名"></a><strong>修改文件名</strong></h2><p><a name="mvFdL"></a></p><h3 id="1-使用mv命令"><a href="#1-使用mv命令" class="headerlink" title="1.使用mv命令"></a><strong>1.使用mv命令</strong></h3><p>**mv a.txt a1.txt     **将a.txt修改为a1.txt</p><ul><li>-b: 当目标文件或目录存在时，在执行覆盖前，会为其创建一个备份。</li><li>-i: 如果指定移动的源目录或文件与目标的目录或文件同名，则会先询问是否覆盖旧文件，输入 y 表示直接覆盖，输入 n 表示取消该操作。</li><li>-f: 如果指定移动的源目录或文件与目标的目录或文件同名，不会询问，直接覆盖旧文件。</li><li>-n: 不要覆盖任何已存在的文件或目录。</li><li>-u：当源文件比目标文件新或者目标文件不存在时，才执行移动操作。<br><a name="h2ijC"></a><h3 id="2-使用cp命令"><a href="#2-使用cp命令" class="headerlink" title="2.使用cp命令"></a><strong>2.使用cp命令</strong></h3></li></ul><p>**cp a.txt a1.txt &amp;&amp; rm -f a.txt      **复制一个新文件(cp)，再删除旧文件(rm)</p><ul><li>-a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合。</li><li>-d：复制时保留链接。这里所说的链接相当于 Windows 系统中的快捷方式。</li><li>-f：覆盖已经存在的目标文件而不给出提示。</li><li>-i：与 -f 选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答 y 时目标文件将被覆盖。</li><li>-p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。</li><li>-r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。</li><li>-l：不复制文件，只是生成链接文件<br><a name="dj1xW"></a><h3 id=""><a href="#" class="headerlink" title=""></a><br /></h3><a name="GBtVy"></a><h3 id="-1"><a href="#-1" class="headerlink" title=""></a><br /></h3><a name="umn4v"></a><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS1226F</title>
      <link href="/2023/04/09/CS1226F/"/>
      <url>/2023/04/09/CS1226F/</url>
      
        <content type="html"><![CDATA[<h2 id="回顾目标-Goal"><a href="#回顾目标-Goal" class="headerlink" title="回顾目标 Goal"></a><strong>回顾目标 Goal</strong></h2><blockquote><ul><li>个人目标:<br>将C#实现的telnet功能移植到CS1226F项目当中</li><li>项目目标:<br>用telnet对交换机进行配置，实现千兆百兆分站式的打流测试</li></ul></blockquote><h2 id="一、Telnet功能"><a href="#一、Telnet功能" class="headerlink" title="一、Telnet功能"></a><strong>一、Telnet功能</strong></h2><ul><li>Telnet是teletype network的缩写。Telnet协议是TCP/IP协议族中的一员，是Internet远程登录服务的标准协议和主要方式。它为用户提供了在本地计算机上完成主机工作的能力，在终端使用者的电脑上使用 telnet 程序，用它连接到服务器。</li><li>终端使用者可以在 telnet 程序中输入命令，这些命令会在服务器上运行，就像直接在服务器控制台上输入一样，可以在本地就能控制服务器，要开始一个 telnet 会话，必须输入用户名和密码类登录服务器，Telnet 是常用的远程控制 Web 服务器的方法。</li><li>使用 Telnet 协议进行远程登录需要满足以下条件：</li></ul><p>1.在本地计算机上必须安装 Telnet 协议的客户端程序<br>2.必须知道远程主机的 ip 地址或域名<br>3.必须知道登录标识符和口令</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35559460/1680748594351-ace214f8-71a1-4d4e-a2df-a20753c1bb62.png#averageHue=%23f4f2ef&clientId=u7b87c0b9-f8fa-4&from=paste&height=301&id=u2c9fbcdf&name=image.png&originHeight=301&originWidth=489&originalType=url&ratio=1&rotation=0&showTitle=false&size=96648&status=done&style=none&taskId=u266fdb8e-2140-45ed-b094-e5223a4eaff&title=&width=489" alt="image.png"></p><h3 id="1-telnet类"><a href="#1-telnet类" class="headerlink" title="1.telnet类"></a><strong>1.telnet类</strong></h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Telnet</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Telnet</span>(<span class="params"><span class="built_in">string</span> Address, <span class="built_in">int</span> Port</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">address = Address;<span class="comment">//地址</span></span><br><span class="line">port = Port;<span class="comment">//端口号：23</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接telnet</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Connect</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">IPAddress import = IPAddress.Parse(address);</span><br><span class="line">iep = <span class="keyword">new</span> IPEndPoint(import, port);</span><br><span class="line">s = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line">s.Connect(iep);</span><br><span class="line">s.BeginReceive(m_byBuff, <span class="number">0</span>, m_byBuff.Length, <span class="number">0</span>, RecievedData, s);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收的字符串，以及发送的字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">SendWaitFor</span>(<span class="params"><span class="built_in">string</span> DataToWaitFor, <span class="built_in">string</span> send, <span class="built_in">int</span> Timeout</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> ct = <span class="number">0</span>; ct &lt;= Timeout * <span class="number">100</span>; ct++)</span><br><span class="line">&#123;</span><br><span class="line">Thread.Sleep(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (strWorkingDataX.ToLower().IndexOf(DataToWaitFor.ToLower()) != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">DispatchMessage(send);</span><br><span class="line">DispatchMessage(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">WorkingDatas = strWorkingDataX;</span><br><span class="line">strWorkingDataX = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">WorkingDatas = strWorkingDataX;</span><br><span class="line">strWorkingDataX = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DispatchMessage</span>(<span class="params"><span class="built_in">string</span> strText</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                Byte[] smk = <span class="keyword">new</span> Byte[strText.Length];</span><br><span class="line">                smk = System.Text.Encoding.Default.GetBytes(strText);</span><br><span class="line">                s.BeginSend(smk, <span class="number">0</span>, smk.Length, <span class="number">0</span>, SendData, s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ers)</span><br><span class="line">            &#123;</span><br><span class="line">                errormessage = <span class="string">&quot;出错了,在回发数据的时候:&quot;</span> + ers.Message;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用1：telnet的收发函数"><a href="#调用1：telnet的收发函数" class="headerlink" title="调用1：telnet的收发函数"></a><strong>调用1：telnet的收发函数</strong></h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Telnet_Send</span>(<span class="params"><span class="built_in">string</span> waitfor, <span class="built_in">string</span> send, <span class="built_in">int</span> time</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.Invoke((EventHandler)(<span class="built_in">delegate</span></span><br><span class="line">                &#123;</span><br><span class="line">                &#125;));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!P_telnet.SendWaitFor(waitfor, send, time))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (method1 == <span class="literal">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">this</span>.Invoke((EventHandler)(<span class="built_in">delegate</span></span><br><span class="line">                        &#123;</span><br><span class="line">                        &#125;));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (method1 == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>.Invoke((EventHandler)(<span class="built_in">delegate</span></span><br><span class="line">                    &#123;</span><br><span class="line">                    &#125;));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ry)</span><br><span class="line">            &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="调用2：用于登入telnet"><a href="#调用2：用于登入telnet" class="headerlink" title="调用2：用于登入telnet"></a><strong>调用2：用于登入telnet</strong></h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置telnet的地址和端口号</span></span><br><span class="line"><span class="keyword">public</span> Telnets.Telnet P_telnet = <span class="keyword">new</span> Telnets.Telnet(<span class="string">&quot;192.168.2.1&quot;</span>, <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//telnet的连接</span></span><br><span class="line"><span class="keyword">if</span> (!P_telnet.Connect())</span><br><span class="line">&#123;</span><br><span class="line">MessageBox.Show(<span class="string">&quot;Telnet连接失败！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当接收到&quot;Username:&quot;,发送&quot;admin&quot;</span></span><br><span class="line"><span class="keyword">if</span> (!Telnet_Send(<span class="string">&quot;Username:&quot;</span>, <span class="string">&quot;admin&quot;</span>, <span class="number">10</span>))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox.Show(<span class="string">&quot;登陆失败！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当接收到&quot;Password:&quot;,发送&quot;system&quot;</span></span><br><span class="line"><span class="keyword">if</span> (!Telnet_Send(<span class="string">&quot;Password:&quot;</span>, <span class="string">&quot;system&quot;</span>, <span class="number">10</span>))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox.Show(<span class="string">&quot;用户名错误！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!Telnet_Send(<span class="string">&quot;#&quot;</span>, <span class="string">&quot;cd /tmp&quot;</span>, <span class="number">10</span>))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox.Show(<span class="string">&quot;密码错误！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当接收到&quot;#&quot;(每台设备不同),发送指令</span></span><br><span class="line"><span class="keyword">if</span> (!Telnet_Send(<span class="string">&quot;#&quot;</span>, <span class="string">&quot;port 1 set ability 0 1 0 1 0&quot;</span>, <span class="number">10</span>))</span><br><span class="line">&#123;</span><br><span class="line">MessageBox.Show(<span class="string">&quot;指令有误&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CS1226F的指令集"><a href="#CS1226F的指令集" class="headerlink" title="CS1226F的指令集"></a>CS1226F的指令集</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//虚拟局域网的划分</span></span><br><span class="line">vlan <span class="keyword">set</span> <span class="number">1</span> <span class="number">0x4000001</span> <span class="number">0x4000001</span></span><br><span class="line">vlan port <span class="number">0</span> <span class="keyword">set</span> pvid <span class="number">1</span></span><br><span class="line">vlan port <span class="number">26</span> <span class="keyword">set</span> pvid <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//千兆百兆配置</span></span><br><span class="line">port <span class="number">8</span> <span class="keyword">set</span> ability <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span><span class="comment">//百兆</span></span><br><span class="line">port <span class="number">8</span> <span class="keyword">set</span> ability <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span><span class="comment">//千兆</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span>- 强制，<span class="number">1</span>自动协商</span><br><span class="line"><span class="number">1</span><span class="number">-100</span>M enable</span><br><span class="line"><span class="number">0</span><span class="number">-1000</span> M disable</span><br><span class="line"><span class="number">1</span>- duplex</span><br><span class="line"><span class="number">0</span>- 流控关闭</span><br></pre></td></tr></table></figure><h3 id="2-常见问题"><a href="#2-常见问题" class="headerlink" title="2.常见问题"></a><strong>2.常见问题</strong></h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a><strong>问题</strong></h4><blockquote><ol><li>在运行过程中，出现”指令错误”、”用户名错误”的问题</li></ol></blockquote><blockquote><ol start="2"><li>在运行过程中，出现”Telnet连接失败！”的问题</li></ol></blockquote><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a><strong>解决方案</strong></h4><blockquote><ol><li>运行过程中，上述问题的出现，可能是因为设备网络形成了回路。<br>解决方法：重启设备，或者拔掉除了PC端的其余网线，再重新进行测试。</li></ol></blockquote><blockquote><ol start="2"><li>在同一窗口下，一台本地机同一时间内只能与一台远程主机建立连接，这是Telnet的一个特性。<br>解决方法：检查是否有其他地方启动并连接了telnet，尤其是命令提示符，并关闭相应的窗口。</li></ol></blockquote><h2 id="二、执行过程"><a href="#二、执行过程" class="headerlink" title="二、执行过程"></a><strong>二、执行过程</strong></h2><h3 id="1-测试前工作准备"><a href="#1-测试前工作准备" class="headerlink" title="1.测试前工作准备"></a><strong>1.测试前工作准备</strong></h3><p>产测电脑需要三网卡：<br>    1)第一个网卡连接局域网，设为动态获取IP<br>    2)第二个网卡连接待测交换机的端口1，设为静态IP:192.168.2.100；<br>    3)第三个网卡连接PTS打流仪的GE口，设为静态IP:192.168.10.100；<br>待测设备和PTS上电，启动完成后，验证产测电脑是否可以ping通：192.168.2.1和192.168.10.11，ping通后再做打流测试</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35559460/1680749160772-fa40a968-5ba3-429a-8dc5-5b61b3215344.png#averageHue=%23f6f6f6&clientId=u7b87c0b9-f8fa-4&from=ui&id=u2fe5d6d2&name=%E5%9B%BE%E7%89%871.png&originHeight=279&originWidth=491&originalType=binary&ratio=1&rotation=0&showTitle=false&size=549196&status=done&style=none&taskId=uf6e2e40c-b1d5-41e6-9adc-86d2e26bf45&title=" alt="图片1.png"></p><p>CS1226F是无管理型交换机，没有串口，测试时需要电脑网线先连接到待测交换机端口1上，其余端口不插线，为避免形成网络回路。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35559460/1680849031780-0369139b-0f68-46a6-a9ca-1ff243597384.png#averageHue=%238c8771&clientId=u932a5e71-04f8-4&from=ui&height=705&id=ua1380f66&name=%E5%9B%BE%E7%89%871.png&originHeight=858&originWidth=1338&originalType=binary&ratio=1&rotation=0&showTitle=false&size=4600378&status=done&style=none&taskId=uf440f5a3-b519-41b8-b9c1-28a36e821d0&title=&width=1099" alt="图片1.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/35559460/1680749160662-df9be27b-d34c-4fff-99cf-c33d4eed3647.png#averageHue=%23f7f7f7&clientId=u7b87c0b9-f8fa-4&from=ui&id=u8d47a786&name=%E5%9B%BE%E7%89%872.png&originHeight=538&originWidth=1302&originalType=binary&ratio=1&rotation=0&showTitle=false&size=49401&status=done&style=none&taskId=ucb78da24-93bf-47c4-a5fe-5581345e540&title=" alt="图片2.png"></p><h3 id="2-开始测试"><a href="#2-开始测试" class="headerlink" title="2.开始测试"></a><strong>2.开始测试</strong></h3><h4 id="千兆打流配置"><a href="#千兆打流配置" class="headerlink" title="千兆打流配置"></a><strong>千兆打流配置</strong></h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TextBox1_TextFinished</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//当SN输入到指定位数时，开始执行</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.textBox_SN1.MaxLength &lt;= <span class="keyword">this</span>.textBox_SN1.Text.Trim().Length)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> sn = textBox_SN1.Text.Trim();</span><br><span class="line"><span class="keyword">if</span> (!SetUUTConfig_One(<span class="number">0</span>, textBox_SN1.Text.Trim()))</span><br><span class="line">&#123;</span><br><span class="line">FailExit_1();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化后按钮状态改变</span></span><br><span class="line">textBox_SN1.Enabled = <span class="literal">false</span>;</span><br><span class="line">button_starttest1.BackColor = SystemColors.ActiveBorder;</span><br><span class="line"><span class="keyword">this</span>.button_starttest1.Focus();</span><br><span class="line">button_starttest1.Text = <span class="built_in">string</span>.Format(<span class="string">&quot;开始测试&#123;0&#125;!&quot;</span>, UUTNumber1);</span><br><span class="line">button_starttest1.BackColor = Color.Blue;</span><br><span class="line">button_starttest1.Enabled = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">SetUUTConfig_One</span>(<span class="params"><span class="built_in">int</span> i, <span class="built_in">string</span> strSN</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> SNCount = Common.TestUnitList.Count;</span><br><span class="line"><span class="built_in">string</span> strTip = <span class="built_in">string</span>.Empty;</span><br><span class="line"><span class="built_in">int</span> iUUTName;<span class="comment">//设备号</span></span><br><span class="line">Device TmpUUT = <span class="keyword">new</span> Device();</span><br><span class="line"><span class="keyword">if</span> (Common.Portlist.Min() == <span class="number">7</span>)<span class="comment">//当使用的端口号为7-12时</span></span><br><span class="line">&#123;</span><br><span class="line">TmpUUT.iPort = i * <span class="number">2</span> + <span class="number">7</span>;</span><br><span class="line">iUUTName = i + <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">TmpUUT.iPort = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">iUUTName = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">TmpUUT.strSN = strSN;</span><br><span class="line"><span class="keyword">if</span> (Common.TestUnitList.Count == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">Common.TestUnitList.Insert(i, TmpUUT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; Common.TestUnitList.Count; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Common.TestUnitList[j].iPort == TmpUUT.iPort)</span><br><span class="line">Common.TestUnitList.RemoveAt(j);</span><br><span class="line">&#125;</span><br><span class="line">Common.TestUnitList.Add(TmpUUT);</span><br><span class="line">&#125;</span><br><span class="line">Common.gbIsOK = <span class="literal">false</span>;</span><br><span class="line">Common.gbERROR = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (!SetConfig(<span class="keyword">out</span> strErrorInfo))<span class="comment">//telnet配置指令的函数</span></span><br><span class="line">&#123;</span><br><span class="line">Common.gbERROR = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Common.gbIsOK = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="千兆打流测试"><a href="#千兆打流测试" class="headerlink" title="千兆打流测试"></a><strong>千兆打流测试</strong></h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Dobutton_starttest1_Click</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> iUUT = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">string</span> tmpResult = <span class="string">&quot;FAIL&quot;</span>; </span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">SetLotSNConfigSave1();</span><br><span class="line"><span class="built_in">int</span> iPort;</span><br><span class="line"><span class="comment">//获取端口号和设备号</span></span><br><span class="line"><span class="keyword">if</span> (Common.Portlist.Min() == <span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line">iPort = <span class="number">7</span>;</span><br><span class="line">iUUT = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">iPort = <span class="number">1</span>;</span><br><span class="line">iUUT = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">button_starttest1.BackColor = SystemColors.ActiveBorder;</span><br><span class="line"><span class="comment">//千兆打流测试</span></span><br><span class="line"><span class="keyword">if</span> (!Getest_1(iUUT, iPort, <span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打流测试结果</span></span><br><span class="line"><span class="keyword">if</span> (Common.Getestlist[iUUT - <span class="number">1</span>] == <span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打流成功</span></span><br><span class="line"><span class="keyword">this</span>.Result1 = <span class="string">&quot;PASS&quot;</span>;</span><br><span class="line">SuccessExit_1();</span><br><span class="line">MessageBox.Show(<span class="built_in">string</span>.Format(<span class="string">&quot;待测设备&#123;0&#125;：千兆打流----------&#123;1&#125;\n&quot;</span>, iUUT, (Common.Getestlist[iUUT - <span class="number">1</span>] ? <span class="string">&quot;PASS&quot;</span> : <span class="string">&quot;FAIL&quot;</span>)), <span class="string">&quot;被测设备&quot;</span> + iUUT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打流失败</span></span><br><span class="line"><span class="keyword">this</span>.Result1 = <span class="string">&quot;FAIL&quot;</span>;</span><br><span class="line">FailExit_1();</span><br><span class="line">MessageBox.Show(<span class="built_in">string</span>.Format(<span class="string">&quot;待测设备&#123;0&#125;：千兆打流----------&#123;1&#125;\n&quot;</span>, iUUT, (Common.Getestlist[iUUT - <span class="number">1</span>] ? <span class="string">&quot;PASS&quot;</span> : <span class="string">&quot;FAIL&quot;</span>)), <span class="string">&quot;被测设备&quot;</span> + iUUT);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">Common.Getestlist[iUUT - <span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">string</span> file = System.Windows.Forms.Application.ExecutablePath;</span><br><span class="line">Configuration config = ConfigurationManager.OpenExeConfiguration(file);</span><br><span class="line">config.AppSettings.Settings[<span class="string">&quot;Result1&quot;</span>].Value = tmpResult;</span><br><span class="line">config.Save(ConfigurationSaveMode.Modified);</span><br><span class="line">ConfigurationManager.RefreshSection(<span class="string">&quot;appSettings&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、重要功能的实现"><a href="#三、重要功能的实现" class="headerlink" title="三、重要功能的实现"></a><strong>三、重要功能的实现</strong></h2><h3 id="1-从配置文件中获取设备信息"><a href="#1-从配置文件中获取设备信息" class="headerlink" title="1.从配置文件中获取设备信息"></a><strong>1.从配置文件中获取设备信息</strong></h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">GetBaseInfo</span>(<span class="params"><span class="built_in">string</span> strEnvironment, <span class="built_in">string</span> strFilename, <span class="keyword">out</span> <span class="built_in">string</span> strError</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">XmlUtility xmlUnit = <span class="keyword">new</span> XmlUtility(<span class="built_in">string</span>.Format(<span class="string">&quot;.\\Config\\&#123;0&#125;&quot;</span>, strFilename));</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取密码提示符</span></span><br><span class="line">Common.g_strPassWordEcho = xmlUnit.GetXmlNodeValue(<span class="built_in">string</span>.Format(<span class="string">&quot;Paras/Common[@Type=\&quot;&#123;0&#125;\&quot;]/PassWordEcho&quot;</span>, strEnvironment));</span><br><span class="line"><span class="comment">//获取登录提示符</span></span><br><span class="line">Common.g_strLoginEcho = xmlUnit.GetXmlNodeValue(<span class="built_in">string</span>.Format(<span class="string">&quot;Paras/Common[@Type=\&quot;&#123;0&#125;\&quot;]/LoginEcho&quot;</span>, strEnvironment));</span><br><span class="line"></span><br><span class="line">Common.g_iDiffFramesPara = <span class="built_in">ulong</span>.Parse(strtmpvalue);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-生成日志"><a href="#2-生成日志" class="headerlink" title="2.生成日志"></a><strong>2.生成日志</strong></h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SaveLog</span>(<span class="params"><span class="built_in">string</span> strSN, <span class="built_in">string</span> msg</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> logPath = <span class="string">&quot;.\\logFile&quot;</span> + <span class="string">&quot;\\&quot;</span> + Common.g_site;<span class="comment">//文件路径</span></span><br><span class="line"><span class="built_in">string</span> logFileName = logPath + <span class="string">&quot;\\&quot;</span> + strSN + <span class="string">&quot;_&quot;</span> + DateTime.Now.ToString(<span class="string">&quot;yyyyMMdd&quot;</span>) + <span class="string">&quot;.txt&quot;</span>;<span class="comment">//生成的文件名</span></span><br><span class="line"><span class="keyword">if</span> (!Directory.Exists(logPath))</span><br><span class="line">&#123;</span><br><span class="line">Directory.CreateDirectory(logPath);</span><br><span class="line">&#125;</span><br><span class="line">DirectoryInfo dir = <span class="keyword">new</span> DirectoryInfo(logPath);</span><br><span class="line">FileInfo[] _files = dir.GetFiles();</span><br><span class="line">Encoding logFileEncoding = Encoding.UTF8;</span><br><span class="line"><span class="built_in">bool</span> IsAppend = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (File.Exists(logFileName))</span><br><span class="line">&#123;</span><br><span class="line">FileInfo f = <span class="keyword">new</span> FileInfo(logFileName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> (StreamWriter sw = <span class="keyword">new</span> StreamWriter(logFileName, IsAppend, logFileEncoding))</span><br><span class="line">&#123;</span><br><span class="line">sw.WriteLine(DateTime.Now.ToString(<span class="string">&quot;yyyy-MM-dd HH:mm:ss: &quot;</span>) + msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-退出功能"><a href="#3-退出功能" class="headerlink" title="3.退出功能"></a><strong>3.退出功能</strong></h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试失败时</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FailExit_1</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.Result1 = <span class="string">&quot;FAIL&quot;</span>;</span><br><span class="line">button_starttest1.Text = <span class="string">&quot;测试失败!&quot;</span>;</span><br><span class="line">button_starttest1.BackColor = Color.Red;</span><br><span class="line">button_starttest1.Enabled = <span class="literal">false</span>;</span><br><span class="line">textBox_Info1.Text = <span class="built_in">string</span>.Empty;</span><br><span class="line">textBox_SN1.Text = <span class="built_in">string</span>.Empty;</span><br><span class="line">textBox_SN1.Enabled = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试成功时</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SuccessExit_1</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.Result1 = <span class="string">&quot;PASS&quot;</span>;</span><br><span class="line">button_starttest1.Text = <span class="string">&quot;测试成功!&quot;</span>;</span><br><span class="line">button_starttest1.BackColor = Color.Green;</span><br><span class="line">button_starttest1.Enabled = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">this</span>.textBox_Info1.Text = <span class="built_in">string</span>.Empty;</span><br><span class="line"><span class="keyword">this</span>.textBox_SN1.Text = <span class="built_in">string</span>.Empty;</span><br><span class="line"><span class="keyword">this</span>.textBox_SN1.Enabled = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2022年终总结</title>
      <link href="/2023/01/05/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>/2023/01/05/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="668edc646cf2daf2588fe22eefbe320790e3c7a9134b8f9444a62450543cd1bb">349b4e469b76323287d33767b88af9b6a95e9abed09094230db19e841b6c99cd4dc747ee36a628a9960ccb7c4f28f5deedda6900c2445627b74f715de1d88c8c75a7e52ebcd021dc9fdae026973498a07f6a126001ead51cc333abc136f08b0a40f9ef215b8a3b79d572de7f647ad4be33df665102b1b1fd62ef331a51fe777edf32d76779994e112063b2cf8f00fe245c910efc4f2bcb25356f07e33a7905cb7870b9b88af5c6cf631ead5e93736111c7d33dd2f8a02812a3aeb62c97e59eed6055dba962346a0de29b90665e7be10dcc1ff90c126375d6ea3400902a336eec93f054b451a63eeeb55239f92a4dd77b890cd32b4d930a03ee078f80f244a60ab99129127da7c425da7eec858ba7ac98aeaefded685eb1481a4cdeb67bceda80de486485a2ab8974b83f976df73d08ed83d132774458938d478fa840052d50618225abacf6fb8cd63eb09174487ab4b67355472e88e19d60ff8dd03c55e3616adf5db658a47d9f9223b792db3c867d2d8a35bab5fcf551f7a5724c0d9a667528b8130a5c8cb065b4633385e2e9fec34a9895b587be97e93c80f02557003b5acc42bcfbb42c9bf2611517f9ddf779c5948157deaf02ef84c7cd52aaaa69f2079e4f0f6edb7ea74f3356f86b865b82d409fdb311f9a057ca12aa310b7e9863b30c6febcab4b16008f29ec16da66f50fc7c4899bf0bff2feade3a7e378cb1357b648b10e415260556de69b7017fd86c4aeb9fca2e45ae202b4dd44c73737c31a7ab49383e7431f7a51b7f0af7aa709c60102d8535c1f445cf648dbd771ddcb1a2325ca9c8a33cfa6fb4de3bd531c60ea80baf16b97fd939f82fb8a878b00fd465e27de462edc4fc2c962c125d3961661662a8b6ac95c11686a93145bfff625574cef311e18d336599e2209f2b4dd8e2072900d65083571faa8c664cadfdd90a21c1e51c5fd0d6b7312f5b15a5a99842cca108d3b179944a2b02bad75199a056a639f1cf513f152d27d40a30d4c171b5264a47ae6c3d06a1cfecb184257486749a87ea4d7b58d7fef97e8bcfcea3c3eb3377800fb3809548f351ac3c95a6369f0c67c6429bffe1de41eecc5c74a4970c6fd4964f7afbdac84c4bbda59c9c88128bf6244c92bb64518f334e5554e940ade6f858e38ba72730f6a9b2f8bea0d59159d2bcc713ff14c7b03870f40148f50f5b3cc29c9f3dd24f31a73510e96fa78b80255a36932bf1ec8729df3bfcb15f2aa6e43ff3aae6b4c5f0247a2ad1d291f4f7718f8ecc6677ac971094dda543f786582c16d5c2b6de032e6e1085b95a521c58073278327aef6ab61b28385d8aad3f218709d04145928d7fa37dc01424097b0e5fdc0f32cde1749c1a22abef5caa296c072d4ad0d38739b2f7160bbbdaa6b32455872522b130c47b622d00613ae137bb9541bec9e6b6c8de02c6fbb5384fc9f2218d454f00a90f36baafcc1c0c2d9e98ceb989a4e6febd0195965cee3aebef1ac0db4fb873e238586e35c7f8c785755d57838cfd9befb5fb97ecbca0594d22bd977494682d8ff473e4ef6ce579164b8927a504fdfc72becbc96ce82be23dbd1fe737e19a81a515b5ac8937c03fc1167ed58c7c2f9f5844227b6b66c227059b940ecfb75fda272150547e5dcff712d0a27609cda74411166ca937d5bb34b3c8e36f1d733c1b52651a3576ab9b8cfe278e41a85f0499789faee86efb4f6fd1f925cb9c1ca3564638a4f169de2638d8d2a4f254aa868949d14c1b6119212207e190aefa1a2e1627f67f6d604af26957a656726e6f969c9ed53b1e1ec5f09cb82993d26a5f3d4c6ea558a56962d4c0d09f2ab9df7084b31969b2b4181f164559f838b5751a793e360c71720275e436904bb3563b922af2dffdd3d791f6967a6822cfca552662414ffd16ec070cb33af9279363b3f79d2efefce9645968ad3916b2ed874e97a1fec715105471073edcc009fc6fc2db3cdc5b20d0a3d2bfd3dcca9bed0b48c9b0fce8326c547e495116ee088144ca589f56a1c4df6add2b76e5f8f3e3140a76f26c8c1ac9b56b52995f82358b59802770aeacc3e71512ad298ba4ad9fa8281706ca785da9eae7e400522e8f695bc1b8e2cfac53962bea33d602cbee2dfb3b572b2a335e85e4e529774d7672460298b101c49bf807a589721700a97cabdeec014385902a2d97d7bdc173f5ed29bcb73b9ef8f9702ea6ea745f05b05f6c3d2072544a5532e8cb1c3a43f166ba09af6aa32e200881959e4b7f37c2c367b650c14ba9f1d8f07c32de291866d471acb03ba2f16d6978204e31316c877ac3fc2788341990303b2404aad0a1e4cd6568a18d63a46463a983ecdde9d63e034738204bb7aa1326e3c85d741c575f0e8dd951bdadf138fd45f863e0e69790b41973ebb78a5935dfdab0c7f71b9e91c0c003f1bd13030dbc0895fc58bdd55ebe17b6aeeb51895c61a3d459ff5cc487eb0671accbeccd665536c1dbef2df7f74c11cbc7824b8b1301dc60d6c6a610e10f8da44b63925eb380bbc93b31b541e09ddbc11c360c23c79550ff26eedbaa65ddf866231e5f5ce06a64b8782c10a0e1b2f7401291079a9ed6e90e18d65b8bb1dacae4a997073c6b3985328853703dc069a10961af97c588ed63255223bc67ac490edfd2f01600233bac03f1cc7d81964d2d2a502d8583fd23d778a7ac7a7c135ec3222be96f3655a9824f7cd34a293885bc0eb5d0f0620e5a520b5f5fe243532f4aa14574632385e824cf11f74ecb08f391f216543a23dc6491507c7fb9a46506550e938f6e40a8c172611cae89bddcfb869fbeb079bce5f71b6c960d438d415edac69cebe1105bbac3247f30895d24e2a613b945fa45f4c157e779174534bdf49f52743216de978f2d56547e21b83eb313d92dc7540c577312bcda1705e3874d9950123b208ecf988142d1810e764e1e100ab917a89e87688fdf7e5b1aefa71931984725d8441fb6f4d53b18b4bb5507364af1ae04d0d6c04bc630676f2244ca443b3d7a93dd2f476762bf2709fd453371a567e118da583b975342ab7bed5b3c1a90eb23ccc25c8a0f1f72e30f93c62461eaf773317b741376ea39a3342345390c3407a8f6eb13c3a46b5adb35af6a639b9ef8a45e6abe1e9a87bb476fc05f3ef6212807f0c93f2f00e8f0836a277198dec1eb3bc382d1f777315f25e4ed38be1b336db123eaf36af4f6718f50d7397bd81519eab1b8e13f1068393eff7e6e69617845dec896c0aca92d9c6471bf83caef086b3fdf26621083d71bd1bd487736b0fe7b3693653e1ab81401f1d1de68d0124110358057575e1ca86c3dd0fc7eab1f5a99a9b0a3388394eb310e38b045f7b86909fb3e4291d51b9cbffbf3646b037b0557aa28a9df52c760f6017191d2c37c589ae5e4fc8d12d50a7c925c0be51288d0c8ac14e66c8a7641cc10df2bb566d4bc3e5c07c8da8084a7ce6130a58cc2ac7d411e11eb5f1a2af2cf4dd45cf362f8f0516bfd0b68003888b729d63493086ea9f9451a44f78c4d17763de3e616621d18852d0432dde107ed7c2f2991cee5c6b44c0ccaab25e97970ea2788a1e790b571b204e9632c805d606f67e38eefc0c286ac55d8dfb85b0ed1291d3fd588923d4282d841a707f2a67528de2ce85a0cf2afba951e74353d0b29ae647e1229340aebaf6924651a0bce188dd02c71472c1e8908dec72451ec90b5e635e70c706ea14203f518366be0935089674d198c70ca4f30c66ad99f6bbdae4052b4f3d76540dadb764908dcb85ab805a216b180cc28476a56805fafa1d151f529ac269e6a12503c7640f4ffdad9884c067af9bf8c053af3a19e5440874fcb900c12602f67c3a204a93e17f0d622c49b3ef33a0ff9f1bc0a868e2a40b233ca1d6213ac949990db820be30ed962d3e7a45f8a53dba6b5f0aeb8bec31f8628c00ff702f0f1b22284ffa651520f4b00c3603b62665ca072ae59c2bc6580bbafad31bb94ae6ea25e4255ecaefedb33ecdf35c93fa5873977200f0ce2995b2b71f78f7e99a64767b7a9c069122d5731b2590778df43a8cd5b7264cf28fc468f5378e5c1b29973a277dd33336cddeb2d8ed1653a8164d524d0c80214d3ef3cd0f40d8804ca0699f64430d1c8c1585cf94ef14285a0298e19e4b441f66ec6dd0ce667142b68e6624d518357ab4d6dd4c2ee08bc605a1b9efc1c640b21ec31181a6ff497878d7779dcfaa988ca0fa0db76a5c8a99e23aea7ee22b6aa72686edcf3165431b689cdc9aaa22c8d61c4539a7ba12b5e8427cbeb179540093a4cc9a0d7b2973314fe2c0edc17d4e664177e22d1990002d7374b9b6a9fa3ea71f326f2d3da3278a2865808a2523c4f99d366e10d9eaf3a9836708a96abbdc9834697d1389f763eeb935844122f220522f02478ba844bed7f289f1194cda2eefa8bbeabf4235ad252de848547dc42221630f7aa9c849bae7c90465b5b9f2a9213271724b7d1bea79dcc4d0c2e0aa66c746edd36fb164fda02528aeb836dbdc86e4a9948eb0b6ddc0858836fe14fd8470f6fab5a15108b4ce25d143ae8153c3a2bf350e2eafa8d5ff8a8f027ebed1434fa08921e88d54d4b06304f92988d042202a4d2c5dcecb236d0079c9644635ebdb2651cea534684df4acc8fe8c0815fbff51059cfad2a16dd8d4f1b002a1b4d777ed306e3c21fca1043bb519aa4dbecc24d70423d38b84cd8a0a7d6e373098910268768b3f5e9f24667140522ff7b9985c44515349b0079c097deff057cb7c6589c562fc82d629921b69e96c6c8f316390e5bb06b9e7f2aa8d7c289664e912fd9089b6baec0c308d4d4247506be091be1bbc261d47c1574619cdff7d069018d593966ee13f4320948332dcd906cad87b65222555ac8bb74c79f763534c65a07603b579a46d3ddf45e40a551ae7081ec6839de45ae42e31ca15de09a0822d5218c3862386115017f78b060ba48561498a4992dd917a7e76884455d3306ec9ed63790afc7b0da1d21b690d2378e64765cd65b8facdd999d2ce2d5b056c8fa21bafaa00ce477bb27327ec991ccf6de1e675d44414f1c55f9e699b0aa4f26e5b4a3e79fff6f3da84151a2175991b699a093c16d069ec0829f66665bfa00681f69db1a895ac956da30f37f1e60ca25fc34277eab31211aec02025b9d19926e36921acc21749bcee88a249b0a84fd0b56a443d49049eaf5db89b10b319221f294b0873c3ae92b1e8a72b82ab37374136281f241d35828b0f9f91615de371d501fa0d86617a075049bc2e47e47eecfccf39518273c1f5bbe147c3332206d530e0c0042744ef1eb10c269ac72372437a156fd5e74f6222256b6c55a1be0bf895e127b0677203c873ef365a6772b17417576e977871e1dab4086e2b9b63c6348d689810b538e613982acc055d629b27e69b02344e59db32e86da33c741ec90556d07b1134d5c7dffcf8de1b7b2fb2ac5952cbcd155dd1a16ad2d1f27ec7b7142111200d6b40bfd7c13f50d86558498e24a8dd609f021047be727ac42460563102ec83134a616d9b514dcb8055d782290b6bc413110d0de976608e79cce5e884eb9c3d72e003006fc64a1d4b0533d316edf46b3dc2859c32bed3b7dd267262f6134d816418d940ae07094d2c3cf7849980fc64ba292bdb9f4a9468f9f151325e6482f56881786f7d3fff4074f054cec5fb63246e9d7d2264184fba9cafb7cf732e0d66bf553532af60dc57d7f21ec601909d9947825bb4bbcf02b14408da68f7947eefc0bba84499adc4fd77be9e9af31e87055dab3b69ef0e37f1ec5035045891c3d7c2df98f03d31a897d712c9887bcdc6832581d63d4e92580ad01088891ac59b5e4966e6b170037c149f051b835baead2c631d977733238d76c8a3ffadafd412119c19dc30da15d7a7dbb00a7b92bbaa460ee4518de0c0e761d868b42a1937e6b6e0c0d83aa389952ee4da232ef62048ddebbb1adad05ea01c7547d7050ad7ab36ef4e34d4503e6ab63273e8b0ab66fb9cd6a2057f8e3959aa7800c7010a473578dcb25a24e1851305d53c1f3869f448f3788cc306143f4c1f8224d69af726d165e893a533f0ef54eaf6b809a5b765cbf6f673d2383c8986ecbe47e28f84c96aec01ac4e2ed55ac1c9a28d8efc9193143bc74ff0fa7ee60e455bb2ebbffa19269f378d41b07c75c8c896689946f15a09d900cb061fe823d843f1e372e6e66f55335ddaf91aacc84ceecc0e493055214c28f6d4b6ec5ddb01c3fb122cd127e30575b8a3e4bf8bfb1f6ae42d92d8478bb05c8c3efa032ca65f88bcfb7d68c05cb68ebb7351d3c0370b37f14ce6d3056813dff632992990cdd241269dcb503d7d84abe152b3a4465c7ad2eb891036e6b5f2493aae0634e390149858c1f8ede8b45d05a71c1acdb5703b8aed097e780c74768d9ff762732cb96fbd002ab78ba38e620798be5e3cc3cdb3a3fc6ee9d5116a0016dcdd945200c4ff54c0a1c02e6ee1aee3a326cee53a2337c11f3b54423d35de35f1bdfd35eb334d3add1a91f8d0c09cebb5feba464ec70c0961909ae37763280b25c9862f8e8dc97d505fca556ad16a583c3acd18686660e22f5e5cbdd285664af15c78872d86f3c2a216955d9c2d7299c52ad8a491db8cf81f4092d106d44125a9e9e28a7abe2bb63cccc4df665f3447c04a2721858d1d1ba7c91092cda797d433aea4c0f0dfe82714a0b14aa283b73d37eb32e2dcd3f5620214e70c7a754905a2bf240fe7062b3fd2d6a20950fde03e29a285357d23aff6e3f4d37adfea3bbdeadd6030d442d34968e5806889d67e529821aea06007d0ad8554ad781cc57a799e7ab29498450220a5bba1816396a5d82868737f96b8f8f0ebb1e8df8df692723802f979c4a75d336f70cc05b6beac79876a627d5fdae58a75b363c9a96b588fcc8ce14a530d7bfc7307783bdd99d5ea7dad7088f32d0feab6edad3d0ea149f80885ea0741183b02b2d3761b32250cd1e3151ba90e9668211752e1970a2ce4983d243</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>照片</title>
      <link href="/Gallery/index.html"/>
      <url>/Gallery/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>发牢骚专区</title>
      <link href="/shuoshuo/index.html"/>
      <url>/shuoshuo/index.html</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="https://unpkg.com/artitalk"></script><!-- 存放说说的容器 --><div id="artitalk_main"></div><script>new Artitalk({    appId: '6MDAke4f1KihuGEy0o2a8qxM-MdYXbMMI', // Your LeanCloud appId    appKey: 'qvRNTWsjLR1ACcdgrtBewsAR', // Your LeanCloud appKey    pageSize: 4})</script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
